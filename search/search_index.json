{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-fahmis-project-library","title":"Welcome to Fahmi's Project Library","text":""},{"location":"#greetings-people","title":"Greeting's People","text":"<p>Welcome to Fahmi's Project Library, where you can explore a comprehensive collection of all projects completed and meticulously documented by Fahmi. Feel free to delve into each project and don't hesitate to reach out to him via his social accounts if you have any questions or would like further information. Happy exploring!</p>"},{"location":"#introduction","title":"Introduction","text":"<p>If you are seeking comprehensive insights into Fahmi as an individual, including his contact information, professional career spanning software development and testing, and the certifications he has diligently earned, you will find detailed information here.</p> <p>Let's get started </p>"},{"location":"#documentation-chategories","title":"Documentation Chategories","text":"<p>For those interested in exploring Fahmi's project documentation across categories such as Professional, Assignment, Personal, and Academic Projects, this overview offers a concise introduction to his varied and significant contributions in each field.</p> <ul> <li> <p> Assignment Project (1)</p> <ol> <li>Discover more about Fahmi's Assignment project developed for certification purposes aimed at improving the QA process for his next professional career right here, where detailed information awaits.</li> </ol> <ul> <li> Relational Database</li> <li> Quality Assurance</li> <li> Back-end Development &amp; APIs</li> <li> Postman API Test Automation</li> </ul> </li> <li> <p> Sample of Work (1)</p> <ol> <li>Explore Fahmi's notable contributions to automation tools and script automation, specifically designed to enhance the QA process throughout his professional career, right here for detailed insights.</li> </ol> <ul> <li>Newman Automation</li> <li>Java Automation Framework</li> <li>JMeter Automation</li> <li>Simple CRUD Apps </li> <li>Project Documentation</li> </ul> </li> </ul>"},{"location":"introduction/About-fahmi/","title":"About Fahmi","text":""},{"location":"introduction/About-fahmi/#about-fahmi","title":"About Fahmi","text":""},{"location":"introduction/About-fahmi/#summary","title":"Summary","text":"<p>A graduate student from Electronic Engineering Polytechnic Institute of Surabaya (EEPIS) in 2019, I am interested and have a Diploma Thesis on Smart Meters with Artificial intelligence (AI) Embedded Devices. 4 years of experience in the Research &amp; Development team as a Tester Engineer &amp; Scrum Master to build Embedded Systems, Desktop &amp; Web Applications.</p>"},{"location":"introduction/About-fahmi/#contact-information","title":"Contact Information","text":"<p>If you're looking to contact Fahmi regarding his personal or project source code, you can reach him on this social platform or through specific services.</p> <ul> <li> : fahmiwiradika96</li> <li> : fahmi.wiradika96@gmail.com</li> <li> : fahmiwazu</li> <li> : fahmi-wiradika</li> </ul>"},{"location":"introduction/About-fahmi/#tech-stack","title":"Tech Stack","text":"<p>Fahmi's tech stack includes programming languages, version control systems (VCS), relational database management systems (RDBMS), and a variety of tools essential for his projects and development workflows.</p> <ul> <li> <p> Programming Language</p> <ul> <li> : Python</li> <li> : Java</li> <li> : JavaScript</li> <li> : Markdown</li> <li> : C#/.NET</li> </ul> </li> <li> <p> Integrated Development Environment</p> <ul> <li> : PyCharm </li> <li> : IntelliJ </li> <li> : Visual Code</li> <li> : Eclipse </li> <li> : Visual Studio </li> </ul> </li> <li> <p> Versioning Control System</p> <ul> <li> : GitLab</li> <li> : GitHub</li> <li> : Bitbucket</li> </ul> </li> <li> <p> Database Management System</p> <ul> <li> : PostgreSQL</li> <li> : MySQL </li> <li> : MongoDB</li> </ul> </li> <li> <p> Development &amp; Testing Tool</p> <ul> <li> : Postman</li> <li> : Insomnia</li> <li> : Node.js</li> <li> : Chai</li> <li> : Selenium webdriver</li> </ul> </li> <li> <p> Issue Tracking and Documenation</p> <ul> <li> : MkDocs</li> <li> : JIRA</li> <li> : Confluence</li> <li> : Kibana</li> <li> : Hiware</li> </ul> </li> <li> <p> CI/CD Workflow</p> <ul> <li> : GitHub Action</li> </ul> </li> <li> <p> Testing Framework</p> <ul> <li> : PyTest</li> <li> : Junit</li> </ul> </li> </ul>"},{"location":"introduction/About-fahmi/#interest","title":"Interest","text":"<p>Fahmi's diverse interests, reflecting both his passion for exploration and his insightful commitment to social engagement.</p> <ul> <li> : History</li> <li> : MotoSport</li> <li> : Basketball</li> <li> : Football</li> <li> : Music</li> <li> : Movie</li> <li> : Cooking</li> <li> : Culinary</li> <li> : Cycling</li> <li> : Gaming</li> </ul>"},{"location":"introduction/Certification-fahmi/","title":"Certification","text":""},{"location":"introduction/Certification-fahmi/#certification","title":"Certification","text":""},{"location":"introduction/Certification-fahmi/#freecodecamp","title":"freeCodeCamp","text":"<p>freeCodeCamp is a community of people from all around the world who are learning to code together. You will learn to code by building dozens of projects, step-by-step, right in your browser, code editor, or mobile app. You will also earn free verified certifications along the way. Every aspect of freeCodeCamp is 100% free. The courses, the projects, and even the certifications. </p> <p>Note</p> <p>freeCodeCamp may update Certification Criteria on their curiculum, project material and tool they use to complete the project, make sure keep in touch in their official website on freeCodeCamp.org</p>"},{"location":"introduction/Certification-fahmi/#back-end-developend-and-apis","title":"Back End Developend and APIs","text":"CredentialsSourceCurriculum freeCodeCamp Relational Database Certificate <ul> <li>Credential ID: fahmi-wahyu-wiradika-bedaa</li> <li>Credential URL: fahmi-wahyu-wiradika/back-end-development-and-apis</li> </ul> <p>Today, one of the popular ways to build applications is through microservices, which are small, modular applications that work together to form a larger whole.</p> <p>In the Back End Development and APIs Certification, you'll learn how to write back end apps with Node.js and npm. You'll also build web applications with the Express framework, and build a People Finder microservice with MongoDB and the Mongoose library.</p> <p>follow the link for details about certification materialsfreeCodeCamp - Back End Development and APIs</p> <p>As part of this certification, Fahmi Wahyu Wiradika built the following projects and got all automated test suites to pass:</p> <ul> <li>Timestamp Microservice</li> <li>Request Header Parser Microservice</li> <li>URL Shortener Microservice</li> <li>Exercise Tracker</li> <li>File Metadata Microservice</li> </ul> Certification Tips <ul> <li>Create freeCodeCamp user account to track your progress and earn certification</li> <li>Create MongoDB account and clusters for store backend data</li> <li>Learn basic Node.js and Node Package Manager (NPM)</li> <li>Complete 5 project from freeCodeCamp at your pace</li> <li>If you have some issue, internet is your friend, happy coding! </li> </ul>"},{"location":"introduction/Certification-fahmi/#relational-database","title":"Relational Database","text":"CredentialsSourceCurriculum freeCodeCamp Back End Development and APIs Certificate <ul> <li>Credential ID: fahmi-wahyu-wiradika-rd</li> <li>Credential URL: fahmi-wahyu-wiradika/relational-database</li> </ul> <p>For these courses, you will use real developer tools and software including VS Code, PostgreSQL, and the Linux / Unix command line to complete interactive tutorials and build projects.</p> <p>These courses start off with basic Bash commands. Using the terminal, you will learn everything from navigating and manipulating a file system, scripting in Bash, all the way to advanced usage.</p> <p>Next, you will learn how to create and use a relational database with PostgreSQL, a database management system, and SQL, the language of these databases.</p> <p>Finally, you will learn Git, the version control system, an essential tool of every developer.</p> <p>follow the link for details about certification materialsfreeCodeCamp - Relational Database</p> <p>As part of this certification, Fahmi Wahyu Wiradika built the following projects and got all automated test suites to pass:</p> <ul> <li>Celestial Bodies Database</li> <li>World Cup Database</li> <li>Salon Appointment Scheduler</li> <li>Periodic Table Database</li> <li>Number Guessing Game</li> </ul> Certification Tips <ul> <li>Create freeCodeCamp user account to track your progress and earn certification</li> <li>Learn how to create, read, update and detele action in PostgreSQL</li> <li>Learn how to create, read, update and delete file in Linux / Unix command line</li> <li>Learn Bash commands and regular expression </li> <li>Learn Basic Git operation such as branching, rebase, pull, commit, push etc.</li> <li>Complete 5 project from freeCodeCamp at your pace</li> <li>If you have some issue, internet is your friend, happy coding! </li> </ul>"},{"location":"introduction/Certification-fahmi/#quality-assurance","title":"Quality Assurance","text":"CredentialsSourceCurriculum Certificaiton in progress <ul> <li>Credential ID: fahmi-wahyu-wiradika-qa</li> <li>Credential URL:  fahmi-wahyu-wiradika/quality-assurance</li> </ul> <p>As your programs or web applications become more complex, you'll want to test them to make sure that new changes don't break their original functionality.</p> <p>In the Quality Assurance Certification, you'll learn how to write tests with Chai to ensure your applications work the way you expect them to.</p> <p>Then you'll build a chat application to learn advanced Node and Express concepts. You'll also use Pug as a template engine, Passport for authentication, and Socket.io for real-time communication between the server and connected clients.</p> <p>follow the link for details about certification materialsfreeCodeCamp - Quality Assurance</p> <p>As part of this certification, Fahmi Wahyu Wiradika built the following projects and got all automated test suites to pass:</p> <ul> <li>Metric-Imperial Converter</li> <li>Issue Tracker</li> <li>Personal Library</li> <li>Sudoku Solver </li> <li>American British Translator </li> </ul> Certification Tips <ul> <li>Create freeCodeCamp user account to track your progress and earn certification</li> <li>Learn Chai package and JavaScript assertions</li> <li>Lear how to write Unit Test and Functional Test in JavaScript with Chai</li> <li>Complete 5 project from freeCodeCamp at your pace</li> <li>If you have some issue, internet is your friend, happy coding! </li> </ul>"},{"location":"introduction/Certification-fahmi/#katalon","title":"Katalon","text":"<p>Katalon Platform is an automation testing software tool developed by Katalon, Inc. The software is built on top of the open-source automation frameworks Selenium, Appium with a specialized IDE interface for web, API, mobile and desktop application testing. Katalon Certifications are awarded to Katalon users based on completing a set of defined activities using the Katalon Platform. There are three certification types: Practitioner, Professional, and Expert. Each has a set of criteria to meet. The certificates are valid for 2 years.</p> <p>Note</p> <ol> <li> <p>All criteria can be achieved using either the free or paid version of Katalon solutions.</p> </li> <li> <p>Katalon may update the qualification criteria from time to time. In such cases, the existing certificates from the previous criteria will still remain valid. </p> </li> <li> <p>more information on Katalon Academy Certificaion</p> </li> </ol>"},{"location":"introduction/Certification-fahmi/#practitioner-level","title":"Practitioner Level","text":"CredentialsSourceCurriculum Katalon Practitioner Level Certificate <ul> <li>Credential ID: 665334772dd5a</li> <li>Credential URL: Fahmi - Practitioner Level</li> </ul> <p>Demonstrates the ability to use Katalon Studio to create, run automated tests, and implement test automation.</p> <p>Certification Critetria:</p> <ul> <li>Create test cases: 50/50</li> <li>Create test suites: 10/10</li> <li>Create test suite collections: 3/3</li> <li>Run test case/suite/suite collection executions: 75/75</li> </ul> <p>Katalon certifies the user for their understanding and hands-on experience of using the Katalon platform for test automation, including:</p> <ul> <li>Creating automated test cases using different methods in Katalon Studio</li> <li>Organizing tests in test suites and test suite collections</li> <li>Executing automated tests and viewing reports on Katalon TestOps</li> <li>Scheduling test runs on cloud environments using Katalon TestCloud</li> </ul> Certification Tips <ul> <li>Download free version of Katalon Studio</li> <li>Build Automation Test Project </li> <li>Join Katalon Community and Katalon Certification Program for detail of certification criteria </li> <li>Learn basic and setup for certification material on Katalon Academy Course</li> <li>Track you Certification Progress at Katalon Academy Dashboard</li> <li>Make sure all criteria are completed for certification</li> </ul>"},{"location":"introduction/Certification-fahmi/#professional-level","title":"Professional Level","text":"CredentialsSourceCurriculum Katalon Professional Level Certificate <ul> <li>Credential ID: 66548414726aa</li> <li>Credential URL: Fahmi - Professional Level</li> </ul> <p>Demonstrates the ability to perform efficient automated testing using a combination of Katalon solutions and advanced functionalities</p> <p>Certification Critetria:</p> <ul> <li>Run test executions: 150/150</li> <li>Run test suite executions: 10/10</li> <li>Run test suite collection executions: 5/5</li> <li>Run test executions via command lines: 3/3</li> <li>Run test execution in Katalon Studio with Katalon TestCloud Tunnel: 1/1</li> </ul> <p>Katalon certifies the user for their solid hands-on experience of using the Katalon platform\u2019s advanced features for test automation, including:</p> <ul> <li>Creating a large number of automated test cases using different methods in Katalon Studio</li> <li>Organizing tests in test suites and test suite collections</li> <li>Applying automation to different types of testing</li> <li>Performing visual testing within the Katalon platform</li> <li>Executing a large number of automated tests and viewing reports on Katalon TestOps</li> <li>Running tests on TestOps (local or Docker) using Katalon Runtime Engine</li> </ul> Certification Tips <ul> <li>Create Katalon Account</li> <li>Download Katalon Studio Studio Enterprise (Trial Version for 30 days)</li> <li>Download free version of Katalon Studio</li> <li>Build Automation Test Project </li> <li>Join Katalon Community and Katalon Certification Program for detail of certification criteria </li> <li>Learn basic and setup for certification material on Katalon Academy Course</li> <li>Track you Certification Progress at Katalon Academy Dashboard</li> <li>Make sure all criteria are completed for certification before Katalon Studio Enterprise Expiration Date</li> </ul>"},{"location":"introduction/Certification-fahmi/#expert-level","title":"Expert Level","text":"CredentialsSourceCurriculum Katalon Expert Level Certificate <ul> <li>Credential ID: 66572752327b2</li> <li>Credential URL: Fahmi - Expert Level</li> </ul> <p>Demonstrates the significant ability and extensive experience in using the Katalon Platform for test automation and overseeing testing quality.</p> <p>Certification Critetria:</p> <ul> <li>Run test executions locally via Katalon Studio: 30/30</li> <li>Run test executions with Katalon TestCloud environments through Katalon TestOps: 3/3</li> <li>Run test execution in a private domain with Katalon TestCloud Tunnel through Katalon TestOps: 1/1</li> <li>Run test run executions on TestOps agents (Local or Docker) using Katalon Runtime Engine: 3/3</li> <li>Have test execution results in Katalon TestOps: 200/200</li> </ul> <p>Katalon certifies the user for their understanding and extensive hands-on experience of using the Katalon platform for test automation, including:</p> <ul> <li>Creating a large number of automated test cases using different methods in Katalon Studio</li> <li>Organizing tests in numerous test suites and test suite collections</li> <li>Applying automation to numberous types of testing</li> <li>Executing a large number of automated tests and viewing reports on Katalon TestOps</li> <li>Configuring Katalon TestCloud Tunnel to run tests in private domains on cloud</li> </ul> Certification Tips <ul> <li>Create Katalon Account</li> <li>Download Katalon Studio Studio Enterprise (Trial Version for 30 days)</li> <li>Download free version of Katalon Studio</li> <li>Build Automation Test Project </li> <li>Join Katalon Community and Katalon Certification Program for detail of certification criteria </li> <li>Learn basic and setup for certification material on Katalon Academy Course</li> <li>Track you Certification Progress at Katalon Academy Dashboard</li> <li>Make sure all criteria are completed for certification before Katalon Studio Enterprise Expiration Date</li> </ul>"},{"location":"introduction/Certification-fahmi/#postman","title":"Postman","text":"<p>Postman is the world\u2019s leading API platform. Postman's features simplify each step of building an API and streamline collaboration to help create better APIs\u2014faster. More than 30 million developers and 500,000 organizations across the globe use Postman today.</p> <p>Note</p> <ul> <li>Postman may update the qualification criteria from time to time. In such cases, the existing certificates from the previous criteria will still remain valid. </li> <li>Check Training Recourses by Postman to get certified</li> </ul>"},{"location":"introduction/Certification-fahmi/#api-test-automation","title":"API Test Automation","text":"CredentialsSourceCurriculum Postman API Test Automation Certificate <ul> <li>Credential ID: 66681f09fd693638a4001108</li> <li>Credential URL: Fahmi - API Test Automation</li> </ul> <p>For people who are already familiar with creating requests in Postman, this is an introduction to the world of test automation. You will learn how to write tests and automate test executions.</p> <p>Certification Critetria:</p> <ul> <li>Fork Postman Collection into Personal Workspace</li> <li>Write test script on Pre-Request and Post-Response</li> <li>Complete 5 Assignment Request</li> <li>Claim your Badge</li> </ul> <p>The workspace also contains assignments designed to enhance your understanding of API testing with Postman. Upon completion, you'll earn the Postman badge, signifying your proficiency in API test automation.</p> <ul> <li>Assignment 1: Verify response status code and the value of the property</li> <li>Assignment 2: Write test case using pm.expect to verify response status code</li> <li>Assignment 3: Write an assertion to verify that the response is in JSON format.</li> <li>Assignment 4: Write a JSON schema and test with an assertion that verifies if the response body matches</li> <li>Assignment 5: Create GitHub project and configure a GitHub Actions workflow for Collection Runner</li> </ul> Certification Tips <ul> <li>Watch instruction on Postman API Test Automation from freeCodeCamp</li> <li>Complete The Certification Criteria by Postman</li> </ul>"},{"location":"introduction/Experience-fahmi/","title":"Experience","text":""},{"location":"introduction/Experience-fahmi/#experience","title":"Experience","text":""},{"location":"introduction/Experience-fahmi/#summary","title":"Summary","text":"<p>If you're eager to explore Fahmi's professional career and education journey in detail, you'll find a comprehensive overview of his diverse and impactful experiences right here.</p>"},{"location":"introduction/Experience-fahmi/#professinoal-career","title":"Professinoal Career","text":""},{"location":"introduction/Experience-fahmi/#quality-assurance-engineer","title":"Quality Assurance Engineer","text":"<p>NICPAY Indonesia (Aug 2020 - now)</p> <ul> <li>Develop and execute comprehensive test plans, test cases, and test scripts for payment gateway applications.</li> <li>Conduct functional, regression, performance, and security testing to identify and resolve issues.</li> <li>Collaborate with developers and product development to understand requirements and provide feedback on product design and functionality.</li> <li>Automate testing processes to improve efficiency and coverage using industry-standard tools.</li> <li>Analyze and document test results, reporting defects and suggesting improvements.</li> <li>Maintain testing documentation, including test case design, execution reports, and defect logs.</li> <li>Stay up-to-date with industry trends and emerging technologies to enhance testing strategies</li> </ul> Documentation Bonding Puncak 2024NICEPAY Cup 2.0Bonding IT PlanningIftar Ramadhan 2025 <p></p> Bonding IT Planning &amp; IT Development Department <p></p> <p></p> NICEPAY Badminton Cup 2024 <p></p> <p></p> Bonding Product Development and Quality Assurance Team <p></p> <p></p> Iftar with QA &amp; R&amp;D Team, Ramadhan 2025 <p></p>"},{"location":"introduction/Experience-fahmi/#test-engineer","title":"Test Engineer","text":"<p>EDMI Indonesia (Mar 2020 - Apr 2024) \u00b7 4 yrs 2 mos</p> <ul> <li>Experienced in SDLC models such as Waterfall &amp; Agile</li> <li>Contribute to STLC processes such as Test Plan, Test Scenario, Test Case, Test Execution, and Test Closure </li> <li>Hands-on Functional Testing such as System Testing, Retesting, Regression Testing, and Conformance Testing </li> <li>Reproduce known issues from customers and analyze the root cause</li> <li>Provide Technical Support for field officers to deliver solutions to customer </li> <li>Write Technical Documentation and User Manual for R&amp;D member</li> <li>Develop Automated Testing Tools and Script</li> </ul> Documentation Workspace DashboardTechnical Documentation Web DevelopmentCode ReviewSoftware Beta ReleasedR&amp;D TeamR&amp;D ManagerDeveloper Team <p></p> EDMI Indonesia Office Workspace Dashboard <p></p> <p></p> Web based Technical Documentation Development for R&amp;D Team and Field Officer Technical Support <p></p> <p></p> Web based Technical Documentation Development for R&amp;D Team and Field Officer Technical Support <p></p> <p></p> Desktop Application Software Beta Version Released for Internal use of R&amp;D Team <p></p> <p></p> EDMI Indonesia R&amp;D Team <p></p> <p></p> EDMI Indonesia R&amp;D Manager: Julius Dethan Cornelis Daniel leader and mentor during my jurney with EDMI Indonesia <p></p> <p></p> Developer Team:Husin Abubakar Alaydrus &amp; Hendra SaktiyasaPartners in Professional and Friends in Personal <p></p>"},{"location":"introduction/Experience-fahmi/#scrum-master","title":"Scrum Master","text":"<p>EDMI Indonesia (Jan 2023 - Jun 2023) \u00b7 6 mos</p> <ul> <li>Responsible for Sprint Ceremonial in Agile Team (sprint planning, spring review, daily stand-up, sprint retrospective, code review and test review)</li> <li>Discussed task level of priority with Product Owner </li> <li>Calculated team Story Point weighting</li> <li>Reported Team Velocity chart Burndown chart complete and carry over task to RTE</li> <li>Discussed team dependencies with RTE</li> <li>Delivered sprint goal and objective to stakeholder</li> </ul> Documentation Program Increment PlanningSprint PlanningConfidence Level VotingDaily Stand UpScrum of Scrum ForumSprint Review <p></p> PI Planning with EDMI Limited member around the world <p></p> <p></p> Planning team objective, dependencies and possible challenge <p></p> <p></p> Confidence Level Vote for whole duration of Program Increment (3 mos) <p></p> <p></p> Daily Stand up for update assignment base on progress tracking, dependencies, and blocker if any <p></p> <p></p> SOS(Scrum of Scrum) Forum lead by RTE to monitor and improve team peformance <p></p> <p></p> Sprint Review attended by all R&amp;D Member on site <p></p>"},{"location":"introduction/Experience-fahmi/#internship-program","title":"Internship Program","text":""},{"location":"introduction/Experience-fahmi/#electrical-engineer-intern","title":"Electrical Engineer Intern","text":"<p>Paiton Operation and Maintenance Indonesia (POMI)(Jan 2018 - Apr 2018) \u00b7 4 mos</p> <ul> <li>Implement Safety Oriented and Safe System Work (SMK3)</li> <li>Understand the general design and process of thermal power generation</li> <li>Understand engineering drawings and control diagram, P&amp;ID drawing</li> <li>Execute unit outages scope of major and critical equipment inspections, repairs and cleaning</li> </ul> Documentation Internship CertificateOn Job Training TeamThermal Power Design Concept SCADA OverviewDistributed Control System wiringBLDC Motor ReplacementBrush Generator Maintenance <p></p> On Job Training Certificate of Completion <p></p> <p></p> Meet the Teamfrom left to right: Bramantyo Ewahyono, Fahmi Wahyu Wiradika, Hairur Rofiq, Gamar Basuki <p></p> <p></p> Grand Design of Thermal Power Plan Generator <p></p> <p></p> Supervisory Control and Data Acquisition - Generator Synchronization Overview <p></p> <p></p> DCS(Distributed Control System) Installation and Inspection <p></p> <p></p> Three-Phase Brushless DC Electric Motor Wiring Installation  <p></p> <p></p> Brush Generator Brush Generator-Rotor Housing Brush Generator Replacement Process <p></p>"},{"location":"introduction/Experience-fahmi/#education","title":"Education","text":""},{"location":"introduction/Experience-fahmi/#bachelor-of-applied-industrial-electrical-engineering","title":"Bachelor of Applied Industrial Electrical Engineering","text":"<p>Electronic Engineering Polytechnic Institute of Surabaya (EEPIS)(Sept 2015 - Aug 2019) \u00b7 3 yrs 11 mos</p> <ul> <li>Overall GPA 3.35/4.</li> <li>Member of Factory Automation Laboratory.</li> <li>Member of Industrial Electrical Engineering Student Organization.</li> <li>Coursework: Automation Industry, Embedded Systems, Digital Signal Processing.</li> <li>Thesis on \u201cDesign and build a Smart Energy Meter to identify household loads based on harmonic trace\u201d.</li> </ul> Documentation Academic ActivitySocial ActivityFinal Project DevelopmentFinal Project Presentation <p></p> Factory Automation Laboratory - Siemens S7 300 PLC Module Factory Automation Laboratory - Traffic Light Logic Project Factory Automation Laboratory - Traffic Light Logic Project Demo <p></p> <p></p> Industrial Electrical Engineering Student Organization 2015 Industrial Electrical Student Member Industrial Electrical Student Music Club PENS-Rider (EEPIS Motocycle Community) <p></p> <p></p> Final Project Hardware Scematic Development Final Project Hardware SMD Installation Final Project LCD Testing Finished Hardware Product of Smart Metering System <p></p> <p></p> Smart Metering System Hardware Top View Smart Metering System Hardware Bottom View Smart Metering System Hardware Housing Smart Metering System Demo <p></p>"},{"location":"projects/academic/chapterFour/","title":"chapterFour","text":""},{"location":"projects/academic/chapterOne/","title":"chapterOne","text":""},{"location":"projects/academic/chapterThree/","title":"chapterThree","text":""},{"location":"projects/academic/chapterTwo/","title":"chapterTwo","text":""},{"location":"projects/academic/overview/","title":"Overview","text":""},{"location":"projects/assignment/backendAPI/exerciseTable/","title":"Exercise Tracer","text":""},{"location":"projects/assignment/backendAPI/exerciseTable/#exercise-tracker-project","title":"Exercise Tracker Project","text":"<p>This project is part of the freeCodeCamp Back End Development and APIs Certification Program and demonstrates comprehensive back-end development skills with a focus on RESTful API design, MongoDB integration, and data persistence management.</p>"},{"location":"projects/assignment/backendAPI/exerciseTable/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Exercise Tracker project involves:</p> <ul> <li>Building a comprehensive exercise logging REST API</li> <li>Implementing user management and exercise tracking</li> <li>Creating MongoDB data models and relationships</li> <li>Developing robust API endpoints with query parameters</li> <li>Demonstrating back-end development best practices</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Back-End API Development</p> <ul> <li>Express.js server implementation</li> <li>RESTful API design and development</li> <li>HTTP method handling (GET, POST)</li> <li>Route parameter and query string processing</li> </ul> </li> <li> <p>Database Management</p> <ul> <li>MongoDB integration with Mongoose ODM</li> <li>Data model design and relationships</li> <li>CRUD operations implementation</li> <li>Database query optimization</li> </ul> </li> <li> <p>Data Processing &amp; Validation</p> <ul> <li>Input validation and sanitization</li> <li>Date handling and formatting</li> <li>Data filtering and pagination</li> <li>Error handling and response formatting</li> </ul> </li> <li> <p>Software Engineering Practices</p> <ul> <li>Modular code architecture</li> <li>Separation of concerns (MVC pattern)</li> <li>Environment configuration</li> <li>API documentation and testing</li> </ul> </li> </ol>"},{"location":"projects/assignment/backendAPI/exerciseTable/#application-architecture","title":"\ud83c\udfd7\ufe0f Application Architecture","text":"<ul> <li> <p>Base URL     </p><pre><code>https://github.com/fahmiwazu/fcc-exercise-tracker\n</code></pre><p></p> </li> <li> <p>API Endpoints</p> <ul> <li><code>GET /api/users</code> - Retrieve all users</li> <li><code>POST /api/users</code> - Create new user</li> <li><code>POST /api/users/:id/exercises</code> - Add exercise to user</li> <li><code>GET /api/users/:id/logs</code> - Get user's exercise logs</li> </ul> </li> <li> <p>Data Models</p> <ul> <li>User Model: User account management</li> <li>Exercise Model: Exercise tracking and logging</li> </ul> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-exercise-tracker/\n\u251c\u2500\u2500 controllers/\n\u2502   \u2514\u2500\u2500 activity.controller.js    # Business logic and API handlers\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 user.model.js            # User data model\n\u2502   \u2514\u2500\u2500 exercise.model.js        # Exercise data model\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 user.route.js            # API route definitions\n\u251c\u2500\u2500 views/\n\u2502   \u2514\u2500\u2500 index.html              # Application interface\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 style.css               # Frontend styling\n\u251c\u2500\u2500 index.js                    # Main server entry point\n\u251c\u2500\u2500 package.json               # Dependencies and scripts\n\u2514\u2500\u2500 README.md                  # Project documentation\n</code></pre>"},{"location":"projects/assignment/backendAPI/exerciseTable/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>Node.js (v14 or higher)</li> <li>MongoDB (local or cloud instance)</li> <li>npm package manager</li> <li>Git for version control</li> </ul> </li> <li> <p>Installation Steps</p> <ol> <li>Clone the repository</li> <li>Install dependencies: <code>npm install</code></li> <li>Create <code>.env</code> file with database configuration</li> <li>Set up MongoDB connection string: <code>DB=mongodb://localhost:27017/exercise-tracker</code></li> <li>Start the development server: <code>npm start</code></li> <li>Access application at <code>http://localhost:3000</code></li> </ol> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#technical-implementation-details","title":"\ud83d\udd27 Technical Implementation Details","text":""},{"location":"projects/assignment/backendAPI/exerciseTable/#application-entry-point","title":"Application Entry Point","text":"<p>The main server configuration demonstrates professional Express.js application setup with proper middleware integration and database connectivity:</p> <pre><code>// Core application setup\nconst express = require('express')\nconst app = express()\nconst cors = require('cors')\nrequire('dotenv').config()\nconst mongoose = require('mongoose');\n</code></pre> <p>Key Architecture Decisions:</p> <ul> <li>Modular Imports: Separated route handling from main server</li> <li>Environment Configuration: Secure database connection management</li> <li>Middleware Chain: Proper request processing pipeline</li> <li>Error Handling: Graceful database connection failure management</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#data-models","title":"Data Models","text":"<ul> <li>User Model (<code>user.model.js</code>)</li> </ul> <pre><code>const Mongose = require('mongoose');\nconst UserSchema = Mongose.Schema(\n    {\n        username: String,\n    }\n);\nconst User = Mongose.model(\"User\", UserSchema);\nmodule.exports = User;\n</code></pre> <p>User Model Features</p> <ul> <li>Simple Schema: Lightweight user representation</li> <li>Username Field: Unique identifier for users</li> <li>Mongoose Integration: ODM for MongoDB operations</li> <li>Export Pattern: Modular design for reusability</li> </ul> <ul> <li>Exercise Model (<code>exercise.model.js</code>)</li> </ul> <pre><code>const Mongose = require('mongoose');\nconst ExerciseSchema = Mongose.Schema(\n    {\n        user_id: { type: String, require: true},\n        description : String,\n        duration: Number,\n        date: Date,\n    }\n);\nconst Exercise = Mongose.model(\"Exercise\", Mongose);\nmodule.exports = Exercise;\n</code></pre> <p>Exercise Model Features</p> <ul> <li>User Reference: Links exercises to specific users</li> <li>Exercise Details: Description, duration, and date tracking</li> <li>Data Types: Proper typing for validation</li> <li>Required Fields: Ensures data integrity</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#api-routes","title":"API Routes","text":"<ul> <li>Route Configuration (<code>user.route.js</code>)</li> </ul> <pre><code>const express = require('express');\nconst router = express.Router();\nconst { GetAllUsers, CreateUser, CreateExercise, GetUserLogs } = require(\"../controllers/activity.controller.js\");\n\n// get all users\nrouter.get('/', GetAllUsers);\n\n// create new user\nrouter.post('/', CreateUser);\n\n// create new exercise\nrouter.post('/:id/exercises', CreateExercise);\n\n// get user logs\nrouter.get('/:id/logs', GetUserLogs);\n\n// export module\nmodule.exports = router;\n</code></pre> <p>Route Structure Analysis</p> GET / - Retrieve All UsersPOST / - Create New UserPOST /:id/exercises - Add ExerciseGET /:id/logs - Get User Logs <ul> <li>Purpose: Fetch all registered users</li> <li>Response: Array of user objects</li> <li>Use Case: User selection interface</li> <li>Handler: <code>GetAllUsers</code> controller</li> </ul> <ul> <li>Purpose: Register new user account</li> <li>Input: Username in request body</li> <li>Response: User object with generated ID</li> <li>Handler: <code>CreateUser</code> controller</li> </ul> <ul> <li>Purpose: Log exercise for specific user</li> <li>Parameters: User ID in URL path</li> <li>Input: Exercise details in request body</li> <li>Response: Updated user object with exercise</li> <li>Handler: <code>CreateExercise</code> controller</li> </ul> <ul> <li>Purpose: Retrieve user's exercise history</li> <li>Parameters: User ID in URL path</li> <li>Query Options: from, to, limit parameters</li> <li>Response: User object with exercise log array</li> <li>Handler: <code>GetUserLogs</code> controller</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#server-configuration","title":"Server Configuration","text":"<ul> <li>Main Server Entry Point (<code>index.js</code>)</li> </ul> <pre><code>const express = require('express')\nconst app = express()\nconst cors = require('cors')\nrequire('dotenv').config()\nconst mongoose = require('mongoose');\nconst userRoute = require('./route/user.route.js');\n\n// middleware\napp.use(cors())\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(express.static('public'))\n\napp.get('/', (req, res) =&gt; {\n  res.sendFile(__dirname + '/views/index.html')\n});\n\n// user route\napp.use(\"/api/users/\", userRoute);\n\n// Database Location  \nconst MONGO_URI = process.env.DB;\n\n// Database Connection\nmongoose.connect(MONGO_URI)\n  .then(() =&gt; {\n    console.log(\"Connected to database!\");\n    const listener = app.listen(process.env.PORT || 3000, () =&gt; {\n      console.log('Your app is listening on port ' + listener.address().port)\n    })\n  })\n  .catch(() =&gt; {\n    console.log(\"Connection failed!\");\n  });\n</code></pre> <p>Server Configuration Features</p> Dependencies &amp; ImportsMiddleware StackDatabase IntegrationServer Initialization <ul> <li>Express Framework: Web server framework</li> <li>CORS Middleware: Cross-origin resource sharing</li> <li>dotenv: Environment variable management</li> <li>Mongoose: MongoDB ODM integration</li> <li>User Routes: API route module imports</li> </ul> <ul> <li>CORS: Enables cross-origin requests</li> <li>JSON Parser: Handles JSON request bodies</li> <li>URL Encoded: Processes form data</li> <li>Static Files: Serves public directory</li> <li>Route Integration: Mounts API routes</li> </ul> <ul> <li>Environment Variables: Secure connection string</li> <li>Connection Handling: Promise-based connection</li> <li>Error Management: Database connection errors</li> <li>Server Startup: Conditional on database connection</li> </ul> <ul> <li>Port Configuration: Environment or default port</li> <li>Connection Feedback: Console logging</li> <li>Error Handling: Connection failure management</li> <li>File Serving: Static HTML interface</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#controller-logic","title":"Controller Logic","text":"<ul> <li>Activity Controller (<code>activity.controller.js</code>)</li> </ul> <p>The controller implements the core business logic for all API endpoints:</p> <pre><code>const User = require('./models/user.model.js');\nconst Exercise = require('./models/exercise.model.js');\n\n\n// Get all users info app.get('/api/users',\nconst GetAllUsers = async (req, res) =&gt; {\n    const users = await User.find({}).select(\"_id username\");\n    if (!users) {\n        res.send(\"No users\");\n    } else {\n        res.json(users);\n    }\n}\n\n// Create new user into Database   app.post('/api/users',\nconst CreateUser = async (req, res) =&gt; {\n    try {\n        const user = await User.create(req.body);\n        res.status(200).json(user);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n}\n\n// Crate new exercise tracker app.post('/api/users/:_id/exercises',\nconst CreateExercise = async (req, res) =&gt; {\n    const id = req.params._id;\n    const { description, duration, date } = req.body;\n\n    try {\n        const user = await User.findById(id);\n        if (!user) {\n            res.send(\"Could not find user\");\n        } else {\n            const excerciseObj = new Exercise({\n                user_id: user._id,\n                description,\n                duration,\n                date: date ? new Date(date) : new Date()\n            })\n            const exercise = await excerciseObj.save();\n            res.json({\n                _id: user._id,\n                username: user.username,\n                description: exercise.description,\n                duration: exercise.duration,\n                date: new Date(exercise.date).toDateString()\n            });\n        }\n    } catch (error) {\n        console.log(error);\n        res.send(\"There was an error saving the exercise\");\n    }\n}\n\n// Get user logs \nconst GetUserLogs = async (req, res) =&gt; {\n\n    // create querry and select user\n    const { from, to, limit } = req.query;\n    const { id } = req.params;\n    const user = await User.findById(id);\n\n    // check user status\n    if (!user) {\n        res.send(\"Could not find user\")\n        return;\n    }\n\n    // add querry on user logs\n    let dateObj = {}\n    if (from) {\n        dateObj[\"$gte\"] = new Date(from)\n    }\n    if (to) {\n        dateObj[\"$lte\"] = new Date(to)\n    }\n    let filter = {\n        user_id: id\n    }\n    if (from || to) {\n        filter.date = dateObj;\n    }\n    const exercises = await Exercise.find(filter).limit(+limit ?? 500);\n    const log = exercises.map(e =&gt; ({\n        description: e.description,\n        duration: e.duration,\n        date: e.date.toDateString()\n    }))\n\n    // user logs respond\n    res.json({\n        username: user.username,\n        count: exercises.length,\n        _id: user._id,\n        log\n    });\n\n}\n\n\n// export function\nmodule.exports = {\n    GetAllUsers,\n    CreateUser,\n    CreateExercise,\n    GetUserLogs\n}\n</code></pre> <p>Controller Responsibilities</p> GetAllUsers ControllerCreateUser ControllerCreateExercise ControllerGetUserLogs Controller <ul> <li>Query all users from database</li> <li>Format response as user array</li> <li>Handle database connection errors</li> <li>Return minimal user information</li> </ul> <ul> <li>Validate username input</li> <li>Check for duplicate usernames</li> <li>Create new user record</li> <li>Return user object with generated ID</li> </ul> <ul> <li>Validate user ID parameter</li> <li>Process exercise data (description, duration, date)</li> <li>Create exercise record with user reference</li> <li>Return updated user object with exercise</li> </ul> <ul> <li>Validate user ID parameter</li> <li>Process query parameters (from, to, limit)</li> <li>Filter exercises by date range</li> <li>Apply pagination limits</li> <li>Return user object with filtered exercise log</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#api-specification","title":"\ud83d\udcca API Specification","text":"<p>Request/Response Examples</p> <ul> <li>User Management</li> </ul> Create User RequestCreate User ResponseGet All Users Response <pre><code>POST /api/users\nContent-Type: application/json\n\n{\n  \"username\": \"john_doe\"\n}\n</code></pre> <pre><code>{\n  \"_id\": \"507f1f77bcf86cd799439011\",\n  \"username\": \"john_doe\"\n}\n</code></pre> <pre><code>[\n  {\n    \"_id\": \"507f1f77bcf86cd799439011\",\n    \"username\": \"john_doe\"\n  },\n  {\n    \"_id\": \"507f1f77bcf86cd799439012\",\n    \"username\": \"jane_smith\"\n  }\n]\n</code></pre> <ul> <li>Exercise Management</li> </ul> Create Exercise RequestCreate Exercise Response <pre><code>POST /api/users/507f1f77bcf86cd799439011/exercises\nContent-Type: application/json\n\n{\n  \"description\": \"Running\",\n  \"duration\": 30,\n  \"date\": \"2023-10-15\"\n}\n</code></pre> <pre><code>{\n  \"_id\": \"507f1f77bcf86cd799439011\",\n  \"username\": \"john_doe\",\n  \"description\": \"Running\",\n  \"duration\": 30,\n  \"date\": \"Sun Oct 15 2023\"\n}\n</code></pre> <ul> <li>Exercise Logs</li> </ul> Get User Logs RequestGet User Logs Response <pre><code>GET /api/users/507f1f77bcf86cd799439011/logs?from=2023-10-01&amp;to=2023-10-31&amp;limit=10\n</code></pre> <pre><code>{\n  \"_id\": \"507f1f77bcf86cd799439011\",\n  \"username\": \"john_doe\",\n  \"count\": 2,\n  \"log\": [\n    {\n      \"description\": \"Running\",\n      \"duration\": 30,\n      \"date\": \"Sun Oct 15 2023\"\n    },\n    {\n      \"description\": \"Cycling\",\n      \"duration\": 45,\n      \"date\": \"Mon Oct 16 2023\"\n    }\n  ]\n}\n</code></pre>"},{"location":"projects/assignment/backendAPI/exerciseTable/#key-features-implementation","title":"\ud83d\udd0d Key Features Implementation","text":"<ul> <li> <p>Date Processing Logic</p> <ul> <li>Accept multiple date formats (YYYY-MM-DD, timestamps)</li> <li>Default to current date if not provided</li> <li>Format dates for consistent output</li> <li>Validate date ranges for log filtering</li> </ul> </li> <li> <p>Log Filtering Options</p> <ul> <li><code>from</code>: Start date for exercise log filtering</li> <li><code>to</code>: End date for exercise log filtering</li> <li><code>limit</code>: Maximum number of exercises to return</li> <li>Default behavior when parameters are omitted</li> </ul> </li> <li> <p>Comprehensive Error Management</p> <ul> <li>Invalid user ID validation</li> <li>Missing required fields detection</li> <li>Database connection error handling</li> <li>Malformed request data processing</li> </ul> </li> <li> <p>Input Sanitization</p> <ul> <li>Username format validation</li> <li>Exercise description requirements</li> <li>Duration numeric validation</li> <li>Date format verification</li> </ul> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#database-schema-design","title":"\ud83d\udcc8 Database Schema Design","text":"<ul> <li> <p>User Collection</p> <pre><code>{\n_id: ObjectId,\nusername: String,\n__v: Number\n}\n</code></pre> </li> <li> <p>Exercise Collection</p> <pre><code>{\n_id: ObjectId,\nuser_id: String,\ndescription: String,\nduration: Number,\ndate: Date,\n__v: Number\n}\n</code></pre> </li> <li> <p>Relationships</p> </li> <li> <p>One-to-Many: User to Exercises</p> </li> <li>Reference Pattern: Exercise stores user_id string</li> <li>Query Optimization: Index on user_id for faster lookups</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#skills-demonstrated","title":"\ud83c\udf93 Skills Demonstrated","text":"<ul> <li> <p>Back-End Development</p> <ul> <li>Express.js server architecture and routing</li> <li>RESTful API design principles</li> <li>HTTP method implementation</li> <li>Middleware integration</li> </ul> </li> <li> <p>Database Management</p> <ul> <li>MongoDB database design</li> <li>Mongoose ODM usage</li> <li>Data model relationships</li> <li>Query optimization techniques</li> </ul> </li> <li> <p>API Development</p> <ul> <li>Route parameter handling</li> <li>Query string processing</li> <li>JSON request/response formatting</li> <li>Error handling and validation</li> </ul> </li> <li> <p>Software Architecture</p> <ul> <li>MVC pattern implementation</li> <li>Separation of concerns</li> <li>Modular code organization</li> <li>Controller-service layer design</li> </ul> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#project-requirements-validation","title":"\ud83d\udd0d Project Requirements Validation","text":"<p>freeCodeCamp User Stories Compliance</p> <ul> <li> <p>User Management</p> <ul> <li>\u2705 Create user with username</li> <li>\u2705 Get list of all users</li> <li>\u2705 Return user object with _id and username</li> </ul> </li> <li> <p>Exercise Tracking</p> <ul> <li>\u2705 Add exercises to user by ID</li> <li>\u2705 Handle description, duration, and date</li> <li>\u2705 Default to current date if not provided</li> <li>\u2705 Return user object with exercise data</li> </ul> </li> <li> <p>Exercise Logs</p> <ul> <li>\u2705 Retrieve user's exercise log</li> <li>\u2705 Support from/to date filtering</li> <li>\u2705 Implement limit parameter</li> <li>\u2705 Return count and log array</li> </ul> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#project-outcomes","title":"\ud83c\udfc6 Project Outcomes","text":"<ul> <li> <p>Certification Achievement</p> <ul> <li>Successful completion of freeCodeCamp Back End Development project</li> <li>Demonstrated proficiency in API development</li> <li>Digital badge eligibility for professional networking</li> </ul> </li> <li> <p>Technical Competencies Acquired</p> <ul> <li>RESTful API design and implementation</li> <li>MongoDB database integration</li> <li>Express.js server development</li> <li>Data modeling and relationships</li> </ul> </li> <li> <p>Industry-Ready Skills</p> <ul> <li>Production-quality API architecture</li> <li>Database design and optimization</li> <li>Error handling and validation</li> <li>API documentation and testing</li> </ul> </li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#resources-and-references","title":"\ud83d\udcda Resources and References","text":"<ul> <li>freeCodeCamp Project: Exercise Tracker</li> <li>GitHub Repository: fcc-exercise-tracker</li> <li>MongoDB Documentation: Mongoose ODM</li> <li>Express.js Guide: Express Framework</li> <li>Node.js Documentation: Node.js Official Docs</li> </ul>"},{"location":"projects/assignment/backendAPI/exerciseTable/#course-context","title":"\ud83c\udf1f Course Context","text":"<p>This project represents a comprehensive application of back-end development principles in modern web applications. It demonstrates practical implementation of:</p> <ul> <li>RESTful API design patterns</li> <li>Database Integration with MongoDB</li> <li>Data Modeling and relationships</li> <li>Error Handling and validation</li> <li>API Documentation and testing</li> </ul> <p>The project showcases essential back-end development skills required for professional software development roles, including API design, database management, and server-side application architecture.</p>"},{"location":"projects/assignment/backendAPI/fileMetadata/","title":"fileMetadata","text":""},{"location":"projects/assignment/backendAPI/reqHeaderParser/","title":"reqHeaderParser","text":""},{"location":"projects/assignment/backendAPI/timeStamp/","title":"timeStamp","text":""},{"location":"projects/assignment/backendAPI/urlShortener/","title":"urlShortener","text":""},{"location":"projects/assignment/postman/postmanAutomation/","title":"API Test Automation","text":""},{"location":"projects/assignment/postman/postmanAutomation/#postman-api-automation-assignment-project","title":"Postman API Automation Assignment Project","text":"<p>This project is part of the Postman API Test Automation Certification Program developed by Valentin Despa and available through platforms like freeCodeCamp. It demonstrates comprehensive API testing and automation skills using Postman's testing framework with the Valentino Artisan Coffee House API.</p>"},{"location":"projects/assignment/postman/postmanAutomation/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Postman API Automation Assignment project involves:</p> <ul> <li>Creating automated API tests using Postman's testing framework</li> <li>Implementing response validation and data extraction</li> <li>Managing collections and environment variables</li> <li>Integrating with CI/CD pipelines using GitHub Actions</li> <li>Demonstrating real-world API testing scenarios</li> </ul>"},{"location":"projects/assignment/postman/postmanAutomation/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>API Testing Fundamentals</p> <ul> <li>HTTP status code validation</li> <li>Response body parsing and validation</li> <li>JSON schema validation</li> <li>Data extraction and variable management</li> </ul> </li> <li> <p>Test Automation</p> <ul> <li>Writing JavaScript test scripts in Postman</li> <li>Implementing assertions with pm.test() and pm.expect()</li> <li>Creating reusable test patterns</li> </ul> </li> <li> <p>CI/CD Integration</p> <ul> <li>Setting up GitHub Actions workflows</li> <li>Automated test execution with Postman CLI</li> <li>Test reporting and monitoring</li> </ul> </li> <li> <p>Quality Assurance Best Practices</p> <ul> <li>Structured test organization</li> <li>Comprehensive test coverage</li> <li>Collaborative testing workflows</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#api-structure","title":"\ud83c\udfd7\ufe0f API Structure","text":"<p>The project uses the Valentino Artisan Coffee House API with the following endpoints:</p> <ol> <li> <p>Base URL </p><pre><code>https://valentinos-coffee.herokuapp.com\n</code></pre><p></p> </li> <li> <p>Key Endpoints</p> <ul> <li><code>GET /status</code> - API health check</li> <li><code>GET /products</code> - Retrieve all products</li> <li><code>GET /products/{id}</code> - Get single product details</li> <li><code>POST /clients</code> - Register new client</li> <li><code>POST /orders</code> - Create new order</li> <li><code>GET /orders</code> - Get all orders</li> <li><code>GET /orders/{id}</code> - Get specific order details</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>postman-api-automation/\n\u251c\u2500\u2500 collections/\n\u2502   \u251c\u2500\u2500 Assignment #1/\n\u2502   \u251c\u2500\u2500 Assignment #2/\n\u2502   \u251c\u2500\u2500 Assignment #3/\n\u2502   \u251c\u2500\u2500 Assignment #4/\n\u2502   \u2514\u2500\u2500 Assignment #5/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 postman.yml\n\u251c\u2500\u2500 environments/\n\u2502   \u2514\u2500\u2500 coffee-house.json\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"projects/assignment/postman/postmanAutomation/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ol> <li> <p>Prerequisites</p> <ul> <li>Postman application installed</li> <li>GitHub account for CI/CD integration</li> <li>Postman API key for automation</li> <li>Basic understanding of JavaScript and API testing</li> </ul> </li> <li> <p>Environment Setup</p> <ul> <li>Import the Valentino Artisan Coffee House API collection</li> <li>Configure environment variables</li> <li>Set up Postman workspace for collaboration</li> <li>Generate Postman API key for CI/CD integration</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-tasks-and-solutions","title":"\ud83d\udcca Assignment Tasks and Solutions","text":""},{"location":"projects/assignment/postman/postmanAutomation/#assignment-1-basic-api-testing-and-data-extraction","title":"Assignment #1: Basic API Testing and Data Extraction","text":"<ol> <li> <p>\ud83c\udfaf Objectives</p> <ul> <li>Implement basic status code validation</li> <li>Parse JSON response bodies</li> <li>Extract and store data in variables</li> </ul> </li> <li> <p>Tasks Overview</p> <ol> <li>Status Code Validation: Verify API status endpoint returns 200</li> <li>Response Parsing: Extract product description from JSON response</li> <li>Variable Management: Store order ID for subsequent requests</li> </ol> <p>Assignment</p> Task 1: API Status ValidationTask 2: JSON Response ParsingTask 3: Variable Management <p>Requirement: Add a test to verify the API status endpoint returns 200</p> <p>Solution: </p><pre><code>// Test Script for \"Get API status\"\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>Basic status code assertion</li> <li>Using <code>pm.test()</code> for test creation</li> <li>HTTP status validation patterns</li> </ul> <p>Requirement: Parse JSON response and log product description to console</p> <p>Solution: </p><pre><code>// Test Script for \"Get single product\"\nconst response = pm.response.json();\nconsole.log(response);\nconsole.log(response.id);\nconsole.log(response['product-description']);\n\npm.test(\"Status code test: 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>JSON response parsing with <code>pm.response.json()</code></li> <li>Console logging for debugging</li> <li>Property access with dot notation and bracket notation</li> <li>Alternative status code validation method</li> </ul> <p>Requirement: Extract order ID from response and store in collection variable</p> <p>Solution: </p><pre><code>// Test Script for \"Create a new order\"\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\nconst response = pm.response.json();\n\npm.collectionVariables.set('orderID', response.id);\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>Collection variable management</li> <li>Data extraction for test chaining</li> <li>Response data persistence</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-2-comprehensive-status-code-testing","title":"Assignment #2: Comprehensive Status Code Testing","text":"<ol> <li> <p>\ud83c\udfaf Objectives</p> <ul> <li>Implement consistent status code validation across all endpoints</li> <li>Standardize test patterns for maintainability</li> </ul> <p>Assignment</p> Task: Universal Status Code Testing <p>Requirement: Apply <code>pm.expect()</code> status code tests to all collection requests</p> <p>Solution: </p><pre><code>// Add to all endpoint Post-response scripts\npm.test(\"Status code test: 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>Consistent test pattern implementation</li> <li>Using <code>pm.expect()</code> for assertions</li> <li>Test standardization across endpoints</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-3-advanced-response-validation","title":"Assignment #3: Advanced Response Validation","text":"<ol> <li> <p>\ud83c\udfaf Objectives</p> <ul> <li>Validate JSON response format</li> <li>Implement property existence checks</li> <li>Test data types and patterns</li> </ul> </li> <li> <p>Tasks Overview</p> <ol> <li>JSON Format Validation: Verify response is valid JSON</li> <li>Property Validation: Check ID property existence and format</li> <li>Array Validation: Verify products property is an array</li> </ol> <p>Assignment</p> Task 1: JSON Format ValidationTask 2: ID Property ValidationTask 3: Array Property Validation <p>Requirement: Verify response is in JSON format</p> <p>Solution: </p><pre><code>// Test Script for \"Get an order by ID\"\nlet response;\n\npm.test(\"Response body is JSON\", function(){\n    pm.response.to.be.json;\n    response = pm.response.json();\n});\n</code></pre><p></p> <p>Requirement: Validate ID property existence and format using regex</p> <p>Solution: </p><pre><code>// Test Script for \"Get an order by ID\"\npm.test(\"Get Property ID on JSON\", function(){\n    pm.expect(response).to.have.property('id');\n    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\n});\n</code></pre><p></p> <p>Requirement: Validate products property exists and is an array</p> <p>Solution: </p><pre><code>// Test Script for \"Get an order by ID\"\npm.test(\"Get Property products on JSON\", function(){\n    pm.expect(response).to.have.property('products');\n    pm.expect(response.products).to.be.a('array');\n});\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>Property existence validation</li> <li>Regular expression pattern matching</li> <li>Data type validation</li> <li>Complex assertion chains</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-4-json-schema-validation","title":"Assignment #4: JSON Schema Validation","text":"<ol> <li> <p>\ud83c\udfaf Objectives</p> <ul> <li>Implement comprehensive JSON schema validation</li> <li>Define strict data contracts</li> <li>Ensure API response consistency</li> </ul> </li> <li> <p>Tasks Overview</p> <ol> <li>Basic Schema: Define object-type schema</li> <li>Required Properties: Specify all required fields</li> <li>Additional Properties: Restrict unexpected fields</li> </ol> <p>Assignment</p> Task 1: Basic Object SchemaTask 2: Complete Schema with Required PropertiesTask 3: Strict Schema Validation <p>Requirement: Create JSON schema expecting object response</p> <p>Solution: </p><pre><code>// Test Script for \"Get single product\"\nlet response;\npm.test(\"Response body is JSON\", function(){\n    pm.response.to.be.json;\n    response = pm.response.json();\n    console.log(response['product-description']);\n});\n</code></pre><p></p> <p>Requirement: Define schema with all required properties</p> <p>Solution: </p><pre><code>// Test Script for \"Get single product\"\npm.test(\"JSON Schema are valid\", function(){\n    const schema = {\n        'type': 'object',\n        'properties': {\n            'id': {\n                'type': 'integer'\n            },\n            'category': {\n                'type': 'string'\n            },\n            'name': {\n                'type': 'string'\n            },\n            'isAvailable': {\n                'type': 'boolean'\n            },\n            'product-description': {\n                'type': 'string'\n            },\n            'additionalText': {\n                'type': 'string'\n            }                      \n        },\n        'required': ['id','category','name','isAvailable','product-description','additionalText']\n    };\n    pm.response.to.have.jsonSchema(schema);\n});   \n</code></pre><p></p> <p>Requirement: Prevent additional properties in response</p> <p>Solution: </p><pre><code>// Add to schema object\n'additionalProperties': false\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>JSON Schema definition and validation</li> <li>Data type specification</li> <li>Required field enforcement</li> <li>Additional property restrictions</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-5-cicd-integration-with-github-actions","title":"Assignment #5: CI/CD Integration with GitHub Actions","text":"<ol> <li> <p>\ud83c\udfaf Objectives</p> <ul> <li>Implement automated testing pipeline</li> <li>Configure GitHub Actions workflow</li> <li>Execute Postman collections programmatically</li> </ul> </li> <li> <p>Tasks Overview</p> <ol> <li>GitHub Setup: Create public repository with Actions workflow</li> <li>Automation: Ensure successful collection execution</li> </ol> <p>Assignment</p> Task 1: GitHub Actions ConfigurationTask 2: Successful Test Execution <p>Requirement: Set up automated workflow for Postman collection execution</p> <p>Solution: </p><pre><code># .github/workflows/postman.yml\nname: Automated API tests using Postman CLI\n\non: push\n\njobs:\nautomated-api-tests:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install Postman CLI\n    run: |\n        powershell.exe -NoProfile -InputFormat None -ExecutionPolicy AllSigned -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://dl-cli.pstmn.io/install/win64.ps1'))\"\n    - name: Login to Postman CLI\n    run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}\n    - name: Run API tests\n    run: |\n        postman collection run \"36196810-3064f937-caa2-4035-bcda-b75336216fc5\"\n</code></pre><p></p> <p>Requirement: Verify automated test execution works correctly</p> <p>Solution Output: </p><pre><code>Running your collection...\npostman\n\nValentino Artisan Coffee House API\n\n\u25a1 status\n\u2514 Get API status\nGET https://valentinos-coffee.herokuapp.com/status [200 OK, 783B, 329ms]\n\u221a  Status code is 200\n\u221a  Headers Test\n\n\u25a1 products\n\u2514 Get all products\nGET https://valentinos-coffee.herokuapp.com/products?category=pastry [200 OK, 1.31kB, 77ms]\n\u221a  Status code test: 200\n\n\u2514 Get single product\nGET https://valentinos-coffee.herokuapp.com/products/1001 [200 OK, 954B, 75ms]\n\u221a  Status code test: 200\n\u221a  Response body is JSON\n\u221a  JSON Schema are valid\n\n\u25a1 clients\n\u2514 Register a new client\nPOST https://valentinos-coffee.herokuapp.com/clients [200 OK, 809B, 78ms]\n\u221a  Status code test: 200\n\u221a  Response body is JSON\n\n\u25a1 orders\n\u2514 Create a new order\nPOST https://valentinos-coffee.herokuapp.com/orders [201 Created, 937B, 76ms]\n\u221a  Status code test: 201\n\u221a  Response body is JSON\n\u221a  Customer name\n\u221a  Schema is valid\n\n\u2514 Get all orders\nGET https://valentinos-coffee.herokuapp.com/orders [200 OK, 847B, 74ms]\n\u221a  Status code test: 200\n\n\u2514 Get an order by ID\nGET https://valentinos-coffee.herokuapp.com/orders/AF_86H4A1R [200 OK, 932B, 74ms]\n\u221a  Status code test: 200\n\u221a  Response body is JSON\n\u221a  Get Property ID on JSON\n\u221a  Get Property products on JSON\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           \u2502           executed \u2502            failed \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                iterations \u2502                  1 \u2502                 0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                  requests \u2502                  7 \u2502                 0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              test-scripts \u2502                  7 \u2502                 0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        prerequest-scripts \u2502                  3 \u2502                 0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                assertions \u2502                 17 \u2502                 0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total run duration: 1431ms                                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 total data received: 1.28kB (approx)                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 average response time: 111ms [min: 74ms, max: 329ms, s.d.: 88ms]   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre><p></p> <p>Key Concepts:</p> <ul> <li>GitHub Actions workflow configuration</li> <li>Postman CLI integration</li> <li>Automated test execution</li> <li>CI/CD pipeline implementation</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#technical-implementation-details","title":"\ud83d\udd27 Technical Implementation Details","text":"<ol> <li> <p>Test Patterns and Best Practices</p> Status Code ValidationResponse Body ParsingVariable ManagementProperty ValidationPattern Matching <pre><code>// Method 1: Direct status validation\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n// Method 2: Using pm.expect()\npm.test(\"Status code test: 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n</code></pre> <pre><code>// Parse JSON response\nconst response = pm.response.json();\n\n// Access properties\nconsole.log(response.id);\nconsole.log(response['product-description']);\n</code></pre> <pre><code>// Set collection variable\npm.collectionVariables.set('orderID', response.id);\n\n// Get collection variable\nconst orderId = pm.collectionVariables.get('orderID');\n</code></pre> <pre><code>// Check property existence\npm.expect(response).to.have.property('id');\n\n// Validate data types\npm.expect(response.products).to.be.a('array');\npm.expect(response.id).to.be.a('number');\n</code></pre> <pre><code>// Regular expression validation\npm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\n</code></pre> </li> <li> <p>JSON Schema Validation Pattern</p> <pre><code>const schema = {\n    'type': 'object',\n    'properties': {\n        'id': { 'type': 'integer' },\n        'name': { 'type': 'string' },\n        'isAvailable': { 'type': 'boolean' }\n    },\n    'required': ['id', 'name', 'isAvailable'],\n    'additionalProperties': false\n};\n\npm.response.to.have.jsonSchema(schema);\n</code></pre> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#test-coverage-summary","title":"\ud83d\udcc8 Test Coverage Summary","text":"<ol> <li> <p>Endpoints Tested</p> <ul> <li>7 API endpoints across 4 resource categories</li> <li>17 assertions covering various validation scenarios</li> <li>100% success rate in automated execution</li> </ul> </li> <li> <p>Test Categories</p> <ul> <li>Status Code Validation: 7 tests</li> <li>Response Format Validation: 4 tests  </li> <li>Property Existence: 3 tests</li> <li>Data Type Validation: 2 tests</li> <li>Pattern Matching: 1 test</li> </ul> </li> <li> <p>Performance Metrics</p> <ul> <li>Total execution time: 1431ms</li> <li>Average response time: 111ms</li> <li>Data transferred: 1.28kB</li> <li>Fastest request: 74ms</li> <li>Slowest request: 329ms</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#skills-demonstrated","title":"\ud83c\udf93 Skills Demonstrated","text":"<ol> <li> <p>API Testing Expertise</p> <ul> <li>HTTP status code validation</li> <li>JSON response parsing and validation</li> <li>Data extraction and variable management</li> <li>Schema validation and data contracts</li> </ul> </li> <li> <p>JavaScript Testing Framework</p> <ul> <li>Postman test scripting with JavaScript</li> <li>Assertion patterns with pm.test() and pm.expect()</li> <li>Regular expression pattern matching</li> <li>Console logging for debugging</li> </ul> </li> <li> <p>Automation and CI/CD</p> <ul> <li>GitHub Actions workflow configuration</li> <li>Postman CLI integration</li> <li>Automated test execution</li> <li>Test reporting and monitoring</li> </ul> </li> <li> <p>Quality Assurance Practices</p> <ul> <li>Test organization and structure</li> <li>Comprehensive validation coverage</li> <li>Reusable test patterns</li> <li>Collaborative testing workflows</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#assignment-progression","title":"\ud83d\udd0d Assignment Progression","text":"<ol> <li> <p>Assignment #1: Foundation</p> <ul> <li>Basic API testing concepts</li> <li>Status code validation</li> <li>Response parsing</li> <li>Variable management</li> </ul> </li> <li> <p>Assignment #2: Standardization  </p> <ul> <li>Consistent test patterns</li> <li>Universal validation approaches</li> <li>Code maintainability</li> </ul> </li> <li> <p>Assignment #3: Advanced Validation</p> <ul> <li>Property existence checks</li> <li>Data type validation</li> <li>Pattern matching</li> <li>Complex assertions</li> </ul> </li> <li> <p>Assignment #4: Schema Validation</p> <ul> <li>JSON schema definition</li> <li>Comprehensive data contracts</li> <li>Strict validation rules</li> <li>API contract enforcement</li> </ul> </li> <li> <p>Assignment #5: Automation</p> <ul> <li>CI/CD integration</li> <li>Automated test execution</li> <li>Production-ready workflows</li> <li>Continuous validation</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#project-outcomes","title":"\ud83c\udfc6 Project Outcomes","text":"<ol> <li> <p>Certification Achievement</p> <ul> <li>Completion of Valentin Despa's API Test Automation program</li> <li>Digital badge eligibility for professional networking</li> <li>Demonstrated proficiency in API testing automation</li> </ul> </li> <li> <p>Practical Skills Acquired</p> <ul> <li>Professional API testing methodologies</li> <li>Production-ready automation practices</li> <li>CI/CD pipeline integration</li> <li>Quality assurance best practices</li> </ul> </li> <li> <p>Industry Readiness</p> <ul> <li>Real-world API testing scenarios</li> <li>Enterprise-level automation patterns</li> <li>Collaborative development practices</li> <li>Continuous integration expertise</li> </ul> </li> </ol>"},{"location":"projects/assignment/postman/postmanAutomation/#references-and-resources","title":"\ud83d\udcda References and Resources","text":"<ul> <li>YouTube Tutorial: Postman API Test Automation for Beginners</li> <li>Course Notes: Postman Course Repository</li> <li>Postman Workspace: API Test Automation Collection</li> <li>GitHub Repository: Automation Implementation</li> <li>Instructor: Valentin Despa - Postman Community Expert</li> <li>Platform: freeCodeCamp API Testing Certification</li> </ul>"},{"location":"projects/assignment/postman/postmanAutomation/#course-context","title":"\ud83c\udf1f Course Context","text":"<p>This project represents a complete journey through API test automation, from basic validation to production-ready CI/CD integration. It demonstrates the practical application of:</p> <ul> <li>Quality Assurance Engineering principles</li> <li>Test Automation best practices  </li> <li>API Testing methodologies</li> <li>Continuous Integration workflows</li> <li>Professional Development skills</li> </ul> <p>The assignment structure progressively builds complexity, ensuring comprehensive understanding of API testing automation while preparing students for real-world QA engineering roles.</p>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/","title":"American-British Translator","text":""},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#american-british-translator-project","title":"American British Translator Project","text":"<p>This project is part of the freeCodeCamp Quality Assurance Certification Program and demonstrates comprehensive full-stack web development skills with a focus on API testing, translation algorithms, and test-driven development practices.</p>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The American British Translator project involves:</p> <ul> <li>Building a bidirectional English translation web application</li> <li>Implementing comprehensive unit and functional testing</li> <li>Creating RESTful API endpoints for translation services</li> <li>Developing robust error handling and input validation</li> <li>Demonstrating quality assurance best practices</li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Full-Stack Web Development</p> <ul> <li>Express.js server implementation</li> <li>RESTful API design and development</li> <li>Frontend-backend integration</li> <li>Responsive web interface design</li> </ul> </li> <li> <p>Quality Assurance &amp; Testing</p> <ul> <li>Unit testing with Mocha and Chai</li> <li>Functional testing with Chai-HTTP</li> <li>Test-driven development (TDD) practices</li> <li>Comprehensive test coverage validation</li> </ul> </li> <li> <p>Algorithm Implementation</p> <ul> <li>Dictionary-based translation logic</li> <li>Regular expression pattern matching</li> <li>Context-aware text processing</li> <li>Highlighting and formatting features</li> </ul> </li> <li> <p>Software Engineering Practices</p> <ul> <li>Error handling and validation</li> <li>Code organization and modularity</li> <li>Documentation and maintainability</li> <li>Security best practices</li> </ul> </li> </ol>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#application-architecture","title":"\ud83c\udfd7\ufe0f Application Architecture","text":"<ul> <li> <p>Base URL     </p><pre><code>https://github.com/fahmiwazu/fcc-american-british-translator\n</code></pre><p></p> </li> <li> <p>API Endpoints</p> <ul> <li><code>POST /api/translate</code> - Translation service endpoint</li> <li><code>GET /</code> - Main application interface</li> </ul> </li> <li> <p>Translation Directions</p> <ul> <li>American to British: <code>\"american-to-british\"</code></li> <li>British to American: <code>\"british-to-american\"</code></li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>```\nfcc-american-british-translator/\n\u251c\u2500\u2500 components/\n\u2502   \u2514\u2500\u2500 translator.js          # Core translation logic\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 style.css             # Frontend styling\n\u2502   \u2514\u2500\u2500 translator.js         # Client-side JavaScript\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 api.js                # API route handlers\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 1_unit-tests.js       # Unit tests (24 tests)\n\u2502   \u2514\u2500\u2500 2_functional-tests.js # Functional tests (6 tests)\n\u251c\u2500\u2500 views/\n\u2502   \u2514\u2500\u2500 index.html            # Main application interface\n\u251c\u2500\u2500 server.js                 # Express server configuration\n\u2514\u2500\u2500 package.json              # Dependencies and scripts\n```\n</code></pre>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>Node.js (v14 or higher)</li> <li>npm package manager</li> <li>Git for version control</li> <li>Basic understanding of JavaScript and testing</li> </ul> </li> <li> <p>Installation Steps</p> <ol> <li>Clone the repository</li> <li>Install dependencies: <code>npm install</code></li> <li>Start the development server: <code>npm start</code></li> <li>Run tests: <code>npm test</code></li> <li>Access application at <code>http://localhost:3000</code></li> </ol> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#testing-implementation","title":"\ud83d\udcca Testing Implementation","text":""},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#unit-tests-24-tests-1_unit-testsjs","title":"Unit Tests (24 Tests) - <code>1_unit-tests.js</code>","text":"<p>The unit tests validate the core translation functionality using the <code>Translator</code> class methods.</p> <ul> <li> <p>Test Structure Overview     </p><pre><code>const chai = require(\"chai\");\nconst assert = chai.assert;\nconst Translator = require(\"../components/translator.js\");\nlet translator = new Translator();\n\nsuite(\"Unit Tests\", () =&gt; {\n  // American to British translation tests\n  // British to American translation tests\n  // Highlight translation tests\n});\n</code></pre><p></p> </li> <li> <p>American to British Translation Tests (10 Tests)</p> </li> </ul> Test 1: Basic Vocabulary TranslationTest 2: Food TerminologyTest 3: Housing TerminologyTest 4: Waste Management TerminologyTest 5: Transportation TerminologyTest 6: Cultural ReferencesTest 7: Idiomatic ExpressionsTest 8: Titles and Honorifics (Mr.)Test 9: Professional Titles (Dr.)Test 10: Time Format Translation <pre><code>test(\"Translate Mangoes are my favorite fruit. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Mangoes are my favorite fruit.\")[0],\n    \"Mangoes are my favourite fruit.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate I ate yogurt for breakfast. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"I ate yogurt for breakfast.\")[0],\n    \"I ate yoghurt for breakfast.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate We had a party at my friend's condo. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"We had a party at my friend's condo.\")[0],\n    \"We had a party at my friend's flat.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Can you toss this in the trashcan for me? to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Can you toss this in the trashcan for me?\")[0],\n    \"Can you toss this in the bin for me?\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate The parking lot was full. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"The parking lot was full.\")[0],\n    \"The car park was full.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Like a high tech Rube Goldberg machine. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Like a high tech Rube Goldberg machine.\")[0],\n    \"Like a high tech Heath Robinson device.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate To play hooky means to skip class or work. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"To play hooky means to skip class or work.\")[0],\n    \"To bunk off means to skip class or work.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate No Mr. Bond, I expect you to die. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"No Mr. Bond, I expect you to die.\")[0],\n    \"No Mr Bond, I expect you to die.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Dr. Grosh will see you now. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Dr. Grosh will see you now.\")[0],\n    \"Dr Grosh will see you now.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Lunch is at 12:15 today. to British English\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Lunch is at 12:15 today.\")[0],\n    \"Lunch is at 12.15 today.\"\n  );\n  done();\n});\n</code></pre> <ul> <li>British to American Translation Tests (10 Tests)</li> </ul> Test 11: Sports TerminologyTest 12: Medical TerminologyTest 13: Spelling VariationsTest 14: Holiday TerminologyTest 15: Food and DiningTest 16: Everyday ItemsTest 17: Shopping EventsTest 18: Titles and Honorifics (Mrs)Test 19: Academic TitlesTest 20: Time Format Translation <pre><code>test(\"Translate We watched the footie match for a while. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"We watched the footie match for a while.\")[0],\n    \"We watched the soccer match for a while.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Paracetamol takes up to an hour to work. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"Paracetamol takes up to an hour to work.\")[0],\n    \"Tylenol takes up to an hour to work.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate First, caramelise the onions. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"First, caramelise the onions.\")[0],\n    \"First, caramelize the onions.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate I spent the bank holiday at the funfair. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"I spent the bank holiday at the funfair.\")[0],\n    \"I spent the public holiday at the carnival.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate I had a bicky then went to the chippy. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"I had a bicky then went to the chippy.\")[0],\n    \"I had a cookie then went to the fish-and-chip shop.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate I've just got bits and bobs in my bum bag. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"I've just got bits and bobs in my bum bag.\")[0],\n    \"I've just got odds and ends in my fanny pack.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate The car boot sale at Boxted Airfield was called off. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"The car boot sale at Boxted Airfield was called off.\")[0],\n    \"The swap meet at Boxted Airfield was called off.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Have you met Mrs Kalyani? to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"Have you met Mrs Kalyani?\")[0],\n    \"Have you met Mrs. Kalyani?\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Prof Joyner of King's College, London. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"Prof Joyner of King's College, London.\")[0],\n    \"Prof. Joyner of King's College, London.\"\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Translate Tea time is usually around 4 or 4.30. to American English\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"Tea time is usually around 4 or 4.30.\")[0],\n    \"Tea time is usually around 4 or 4:30.\"\n  );\n  done();\n});\n</code></pre> <ul> <li>Highlight Translation Tests (4 Tests)</li> </ul> Test 21: American to British HighlightingTest 22: Yogurt HighlightingTest 23: British to American HighlightingTest 24: Medical Term Highlighting <pre><code>test(\"Highlight translation in Mangoes are my favorite fruit.\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"Mangoes are my favorite fruit.\")[1],\n    'Mangoes are my &lt;span class=\"highlight\"&gt;favourite&lt;/span&gt; fruit.'\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Highlight translation in I ate yogurt for breakfast.\", function (done) {\n  assert.equal(\n    translator.toBritishEnglish(\"I ate yogurt for breakfast.\")[1],\n    'I ate &lt;span class=\"highlight\"&gt;yoghurt&lt;/span&gt; for breakfast.'\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Highlight translation in We watched the footie match for a while.\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"We watched the footie match for a while.\")[1],\n    'We watched the &lt;span class=\"highlight\"&gt;soccer&lt;/span&gt; match for a while.'\n  );\n  done();\n});\n</code></pre> <pre><code>test(\"Highlight translation in Paracetamol takes up to an hour to work.\", function (done) {\n  assert.equal(\n    translator.toAmericanEnglish(\"Paracetamol takes up to an hour to work.\")[1],\n    '&lt;span class=\"highlight\"&gt;Tylenol&lt;/span&gt; takes up to an hour to work.'\n  );\n  done();\n});\n</code></pre>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#functional-tests-6-tests-2_functional-testsjs","title":"Functional Tests (6 Tests) - <code>2_functional-tests.js</code>","text":"<p>The functional tests validate the API endpoints and complete request-response cycles.</p> <ul> <li> <p>Test Structure Overview     </p><pre><code>const chai = require(\"chai\");\nconst chaiHttp = require(\"chai-http\");\nconst assert = chai.assert;\nconst server = require(\"../server.js\");\n\nchai.use(chaiHttp);\n\nsuite(\"Functional Tests\", () =&gt; {\n  suite(\"Test different post requests.\", function () {\n    // API endpoint testing\n  });\n});\n</code></pre><p></p> </li> <li> <p>API Endpoint Tests</p> </li> </ul> Test 1: Valid Translation RequestTest 2: Invalid Locale FieldTest 3: Missing Text FieldTest 4: Missing Locale FieldTest 5: Empty Text FieldTest 6: No Translation Needed <pre><code>test(\"Translation with text and locale fields: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({\n      text: \"Mangoes are my favorite fruit.\",\n      locale: \"american-to-british\",\n    })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(\n        res.body.translation,\n        'Mangoes are my &lt;span class=\"highlight\"&gt;favourite&lt;/span&gt; fruit.'\n      );\n      done();\n    });\n});\n</code></pre> <pre><code>test(\"Translation with text and invalid locale field: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({ text: \"Mangoes are my favorite fruit.\", locale: \"invalid\" })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"Invalid value for locale field\");\n      done();\n    });\n});\n</code></pre> <pre><code>test(\"Translation with missing text field: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({ locale: \"american-to-british\" })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"Required field(s) missing\");\n      done();\n    });\n});\n</code></pre> <pre><code>test(\"Translation with missing locale field: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({ text: \"Mangoes are my favorite fruit.\" })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"Required field(s) missing\");\n      done();\n    });\n});\n</code></pre> <pre><code>test(\"Translation with empty text: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({ text: \"\", locale: \"american-to-british\" })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"No text to translate\");\n      done();\n    });\n});\n</code></pre> <pre><code>test(\"Translation with text that needs no translation: POST request to /api/translate\", function (done) {\n  chai\n    .request(server)\n    .post(\"/api/translate\")\n    .send({\n      text: \"This one should be fine the way it is.\",\n      locale: \"american-to-british\",\n    })\n    .end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.translation, \"Everything looks good to me!\");\n      done();\n    });\n});\n</code></pre>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#technical-implementation-details","title":"\ud83d\udd27 Technical Implementation Details","text":"<ul> <li>Translation Algorithm Patterns</li> </ul> Dictionary-Based TranslationTime Format ConversionTitle and Honorific Handling <pre><code>// American to British vocabulary mapping\nconst americanToBritish = {\n  \"favorite\": \"favourite\",\n  \"yogurt\": \"yoghurt\",\n  \"condo\": \"flat\",\n  \"trashcan\": \"bin\",\n  \"parking lot\": \"car park\"\n};\n</code></pre> <pre><code>// American time format (12:30) to British (12.30)\ntext.replace(/(\\d{1,2}):(\\d{2})/g, '$1.$2');\n\n// British time format (12.30) to American (12:30)\ntext.replace(/(\\d{1,2})\\.(\\d{2})/g, '$1:$2');\n</code></pre> <pre><code>// American to British (remove periods)\ntext.replace(/\\b(Mr|Mrs|Ms|Dr|Prof)\\.(?=\\s)/g, '$1');\n\n// British to American (add periods)\ntext.replace(/\\b(Mr|Mrs|Ms|Dr|Prof)(?=\\s)/g, '$1.');\n</code></pre> <ul> <li>API Response Structure</li> </ul> Successful Translation ResponseError Response Examples <pre><code>{\n  \"text\": \"Mangoes are my favorite fruit.\",\n  \"translation\": \"Mangoes are my &lt;span class=\\\"highlight\\\"&gt;favourite&lt;/span&gt; fruit.\"\n}\n</code></pre> <pre><code>// Missing fields\n{ \"error\": \"Required field(s) missing\" }\n\n// Empty text\n{ \"error\": \"No text to translate\" }\n\n// Invalid locale\n{ \"error\": \"Invalid value for locale field\" }\n\n// No translation needed\n{ \"translation\": \"Everything looks good to me!\" }\n</code></pre> <ul> <li> <p>Test Execution Commands</p> <ul> <li> <p>Run All Tests </p><pre><code>npm test\n</code></pre><p></p> </li> <li> <p>Run Unit Tests Only </p><pre><code>npm run test:unit\n</code></pre><p></p> </li> <li> <p>Run Functional Tests Only </p><pre><code>npm run test:functional\n</code></pre><p></p> </li> <li> <p>Generate Test Coverage Report </p><pre><code>npm run coverage\n</code></pre><p></p> </li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#test-coverage-summary","title":"\ud83d\udcc8 Test Coverage Summary","text":"<ul> <li> <p>Test Statistics</p> <ul> <li>Total Tests: 30 tests</li> <li>Unit Tests: 24 tests (80%)</li> <li>Functional Tests: 6 tests (20%)</li> <li>Success Rate: 100% (30/30 passing)</li> </ul> </li> <li> <p>Translation Coverage</p> <ul> <li>American to British: 10 vocabulary tests + 4 highlighting tests</li> <li>British to American: 10 vocabulary tests + 4 highlighting tests  </li> <li>API Endpoints: 6 comprehensive functional tests</li> <li>Error Handling: 4 error scenario tests</li> </ul> </li> <li> <p>Performance Metrics</p> <ul> <li>Test Execution Time: ~500ms total</li> <li>API Response Time: &lt;100ms average</li> <li>Memory Usage: Efficient dictionary-based lookups</li> <li>Coverage: 100% of critical translation paths</li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#skills-demonstrated","title":"\ud83c\udf93 Skills Demonstrated","text":"<ul> <li> <p>Quality Assurance Expertise</p> <ul> <li>Test-driven development (TDD) methodology</li> <li>Comprehensive unit and functional testing</li> <li>API endpoint validation and error handling</li> <li>Test coverage analysis and optimization</li> </ul> </li> <li> <p>Full-Stack Development</p> <ul> <li>Express.js server architecture</li> <li>RESTful API design and implementation</li> <li>Frontend-backend integration</li> <li>Responsive web interface development</li> </ul> </li> <li> <p>Algorithm Implementation</p> <ul> <li>Dictionary-based translation logic</li> <li>Regular expression pattern matching</li> <li>Context-aware text processing</li> <li>Highlighting and formatting algorithms</li> </ul> </li> <li> <p>Software Engineering Practices</p> <ul> <li>Modular code architecture</li> <li>Error handling and input validation</li> <li>Documentation and maintainability</li> <li>Version control and collaboration</li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#project-requirements-validation","title":"\ud83d\udd0d Project Requirements Validation","text":"<p>freeCodeCamp User Stories Compliance</p> <ul> <li> <p>Translation Functionality</p> <ul> <li>\u2705 Text input area for user content</li> <li>\u2705 Locale selection dropdown</li> <li>\u2705 Translation button functionality</li> <li>\u2705 Output display with highlighting</li> <li>\u2705 Clear button for resetting interface</li> </ul> </li> <li> <p>API Endpoints</p> <ul> <li>\u2705 POST /api/translate endpoint</li> <li>\u2705 JSON request/response format</li> <li>\u2705 Text and locale field validation</li> <li>\u2705 Proper error handling and messages</li> <li>\u2705 Translation highlighting implementation</li> </ul> </li> <li> <p>Testing Requirements</p> <ul> <li>\u2705 24 unit tests covering translation logic</li> <li>\u2705 6 functional tests covering API endpoints</li> <li>\u2705 All tests passing (30/30)</li> <li>\u2705 Comprehensive error scenario coverage</li> <li>\u2705 Highlighting validation tests</li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#project-outcomes","title":"\ud83c\udfc6 Project Outcomes","text":"<ul> <li> <p>Certification Achievement</p> <ul> <li>Successful completion of freeCodeCamp Quality Assurance project</li> <li>Digital badge eligibility for professional networking</li> <li>Demonstrated proficiency in full-stack testing practices</li> </ul> </li> <li> <p>Technical Competencies Acquired</p> <ul> <li>Advanced JavaScript testing with Mocha and Chai</li> <li>RESTful API development and testing</li> <li>Error handling and input validation</li> <li>Test-driven development practices</li> </ul> </li> <li> <p>Industry-Ready Skills</p> <ul> <li>Production-quality code architecture</li> <li>Comprehensive testing methodology</li> <li>API design and documentation</li> <li>Quality assurance best practices</li> </ul> </li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#resources-and-references","title":"\ud83d\udcda Resources and References","text":"<ul> <li>freeCodeCamp Project: American British Translator</li> <li>GitHub Repository: fcc-american-british-translator</li> <li>Live Demo: Replit Implementation</li> <li>Testing Framework: Mocha and Chai</li> <li>HTTP Testing: Chai-HTTP</li> </ul>"},{"location":"projects/assignment/qualityAssurance/american-britishTranslator/#course-context","title":"\ud83c\udf1f Course Context","text":"<p>This project represents a comprehensive application of quality assurance principles in full-stack web development. It demonstrates practical implementation of:</p> <ul> <li>Test-Driven Development methodology</li> <li>API Testing best practices</li> <li>Error Handling and validation</li> <li>Code Quality and maintainability</li> <li>Documentation and project structure</li> </ul> <p>The project showcases the complete development lifecycle from planning and implementation to testing and deployment, preparing students for professional software development and quality assurance engineering roles.</p>"},{"location":"projects/assignment/qualityAssurance/issueTracker/","title":"issueTracker","text":""},{"location":"projects/assignment/qualityAssurance/metricImperialConverter/","title":"metricImperialConverter","text":""},{"location":"projects/assignment/qualityAssurance/personalLibrary/","title":"personalLibrary","text":""},{"location":"projects/assignment/qualityAssurance/sudokuSolver/","title":"sudokuSolver","text":""},{"location":"projects/assignment/relationalDatabase/celestialDB/","title":"Celestial Bodies Database","text":""},{"location":"projects/assignment/relationalDatabase/celestialDB/#celestial-bodies-database-project","title":"Celestial Bodies Database Project","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification course. It demonstrates the creation and management of a PostgreSQL database containing information about celestial objects including galaxies, stars, planets, and moons.</p>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Celestial Bodies Database project involves:</p> <ul> <li>Creating a comprehensive PostgreSQL database for astronomical data</li> <li>Implementing normalized database schema with proper relationships</li> <li>Storing information about galaxies, stars, planets, and moons</li> <li>Demonstrating advanced SQL concepts and database design principles</li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<p>The database consists of five main tables with hierarchical relationships:</p> <p>Database Schema</p> Galaxy TableStar TablePlanet TableMoon TableGalaxy Type Table <pre><code>CREATE TABLE galaxy (\n    galaxy_id SERIAL PRIMARY KEY,\n    name VARCHAR(255) UNIQUE NOT NULL,\n    galaxy_type VARCHAR(100),\n    description TEXT,\n    estimated_mass NUMERIC(15,2),\n    has_supermassive_black_hole BOOLEAN NOT NULL,\n    age_in_millions_of_years INT,\n    distance_from_earth_in_light_years INT\n);\n</code></pre> <ul> <li>galaxy_id: Primary key, auto-incrementing integer</li> <li>name: Unique galaxy name (e.g., 'Milky Way', 'Andromeda')</li> <li>galaxy_type: Classification type (Spiral, Elliptical, etc.)</li> <li>description: Detailed text description</li> <li>estimated_mass: Mass in solar masses with precision</li> <li>has_supermassive_black_hole: Boolean flag for central black hole</li> <li>age_in_millions_of_years: Galaxy age estimation</li> <li>distance_from_earth_in_light_years: Distance measurement</li> </ul> <pre><code>CREATE TABLE star (\n    star_id SERIAL PRIMARY KEY,\n    name VARCHAR(255) UNIQUE NOT NULL,\n    galaxy_id INT NOT NULL REFERENCES galaxy(galaxy_id),\n    mass_in_solar_masses NUMERIC(10,3),\n    temperature_in_kelvin INT,\n    luminosity_in_solar_units NUMERIC(8,3),\n    radius_in_solar_radii NUMERIC(6,3),\n    is_main_sequence BOOLEAN NOT NULL,\n    has_planets BOOLEAN\n);\n</code></pre> <ul> <li>star_id: Primary key, auto-incrementing integer</li> <li>galaxy_id: Foreign key referencing galaxy.galaxy_id</li> <li>mass_in_solar_masses: Stellar mass relative to our Sun</li> <li>temperature_in_kelvin: Surface temperature</li> <li>luminosity_in_solar_units: Brightness relative to our Sun</li> <li>radius_in_solar_radii: Size relative to our Sun</li> <li>is_main_sequence: Boolean for stellar classification</li> <li>has_planets: Boolean indicating planetary system</li> </ul> <pre><code>CREATE TABLE planet (\n    planet_id SERIAL PRIMARY KEY,\n    name VARCHAR(255) UNIQUE NOT NULL,\n    star_id INT NOT NULL REFERENCES star(star_id),\n    mass_in_earth_masses NUMERIC(10,6),\n    radius_in_earth_radii NUMERIC(8,6),\n    orbital_period_in_days NUMERIC(12,3),\n    distance_from_star_in_au NUMERIC(8,6),\n    has_atmosphere BOOLEAN NOT NULL,\n    is_dwarf_planet BOOLEAN NOT NULL,\n    number_of_moons INT\n);\n</code></pre> <ul> <li>planet_id: Primary key, auto-incrementing integer</li> <li>star_id: Foreign key referencing star.star_id</li> <li>mass_in_earth_masses: Planetary mass relative to Earth</li> <li>radius_in_earth_radii: Size relative to Earth</li> <li>orbital_period_in_days: Time to orbit parent star</li> <li>distance_from_star_in_au: Distance in Astronomical Units</li> <li>has_atmosphere: Boolean for atmospheric presence</li> <li>is_dwarf_planet: Boolean for classification</li> <li>number_of_moons: Count of natural satellites</li> </ul> <pre><code>CREATE TABLE moon (\n    moon_id SERIAL PRIMARY KEY,\n    name VARCHAR(255) UNIQUE NOT NULL,\n    planet_id INT NOT NULL REFERENCES planet(planet_id),\n    mass_in_earth_moon_masses NUMERIC(8,6),\n    radius_in_kilometers NUMERIC(8,3),\n    orbital_period_in_days NUMERIC(10,6),\n    distance_from_planet_in_km INT,\n    is_tidally_locked BOOLEAN NOT NULL,\n    has_water_ice BOOLEAN\n);\n</code></pre> <ul> <li>moon_id: Primary key, auto-incrementing integer</li> <li>planet_id: Foreign key referencing planet.planet_id</li> <li>mass_in_earth_moon_masses: Mass relative to Earth's Moon</li> <li>radius_in_kilometers: Physical radius</li> <li>orbital_period_in_days: Time to orbit parent planet</li> <li>distance_from_planet_in_km: Orbital distance</li> <li>is_tidally_locked: Boolean for tidal locking status</li> <li>has_water_ice: Boolean for water ice presence</li> </ul> <pre><code>CREATE TABLE galaxy_type (\n    galaxy_type_id SERIAL PRIMARY KEY,\n    type_name VARCHAR(50) UNIQUE NOT NULL,\n    description TEXT,\n    typical_characteristics TEXT\n);\n</code></pre> <ul> <li>galaxy_type_id: Primary key, auto-incrementing integer</li> <li>type_name: Galaxy classification name</li> <li>description: Detailed description of type</li> <li>typical_characteristics: Common features</li> </ul> <p>Relationships</p> <ul> <li><code>star.galaxy_id</code> \u2192 <code>galaxy.galaxy_id</code></li> <li><code>planet.star_id</code> \u2192 <code>star.star_id</code></li> <li><code>moon.planet_id</code> \u2192 <code>planet.planet_id</code></li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-rdb-celestialdb/\n\u251c\u2500\u2500 universe.sql        # Database dump file\n\u251c\u2500\u2500 populate_data.sql   # Data insertion scripts\n\u251c\u2500\u2500 schema.md          # Database schema documentation\n\u251c\u2500\u2500 queries.md         # Example queries and usage\n\u2514\u2500\u2500 README.md          # Project documentation\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>PostgreSQL installed and running</li> <li>Command line access to PostgreSQL utilities</li> <li>FreeCodeCamp development environment</li> </ul> </li> <li> <p>Database Setup</p> Start PostgreSQL ServiceCreate and Connect to DatabaseCreate Universe DatabaseLoad Database from SQL File <pre><code>sudo service postgresql start\n</code></pre> <pre><code>psql --username=freecodecamp --dbname=postgres\n</code></pre> <pre><code>CREATE DATABASE universe;\n\\c universe\n</code></pre> <pre><code>psql --username=freecodecamp --dbname=universe &lt; universe.sql\n</code></pre> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#key-features-and-requirements","title":"\ud83d\udd27 Key Features and Requirements","text":"<ol> <li> <p>Database Structure Requirements</p> <p>\u2705 Database Creation: Database named <code>universe</code> \u2705 Table Creation: Tables named <code>galaxy</code>, <code>star</code>, <code>planet</code>, and <code>moon</code> \u2705 Primary Keys: Auto-incrementing primary keys in all tables \u2705 Naming Convention: Primary keys follow <code>table_name_id</code> format \u2705 Foreign Keys: Proper foreign key relationships established  </p> </li> <li> <p>Data Type Requirements</p> <p>\u2705 VARCHAR Columns: Name columns in all tables \u2705 INT Data Type: Used for age, temperature, and distance fields \u2705 NUMERIC Data Type: Used for mass, radius, and orbital data \u2705 TEXT Data Type: Used for descriptions and characteristics \u2705 BOOLEAN Data Type: Used for classification flags  </p> </li> <li> <p>Relationship Requirements</p> <p>\u2705 Star-Galaxy: Each star references a galaxy \u2705 Planet-Star: Each planet references a star \u2705 Moon-Planet: Each moon references a planet  </p> </li> <li> <p>Data Requirements</p> <p>\u2705 Table Count: Five tables total (including galaxy_type) \u2705 Column Count: Minimum three columns per table \u2705 Galaxy/Star Columns: Five+ columns each \u2705 Planet/Moon Columns: Five+ columns each \u2705 Row Requirements:</p> <ul> <li>Galaxy table: 6+ rows</li> <li>Star table: 6+ rows  </li> <li>Planet table: 12+ rows</li> <li>Moon table: 20+ rows</li> </ul> </li> <li> <p>Constraint Requirements</p> <p>\u2705 NOT NULL: Multiple NOT NULL constraints per table \u2705 UNIQUE: Unique constraints on name columns  </p> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#usage-examples-and-queries","title":"\ud83d\udcca Usage Examples and Queries","text":"<ul> <li> <p>Basic Data Retrieval</p> View All GalaxiesCount Objects by Type <pre><code>SELECT * FROM galaxy ORDER BY name;\n</code></pre> <pre><code>SELECT \n    'Galaxies' as object_type, COUNT(*) as count FROM galaxy\nUNION ALL\nSELECT 'Stars', COUNT(*) FROM star\nUNION ALL  \nSELECT 'Planets', COUNT(*) FROM planet\nUNION ALL\nSELECT 'Moons', COUNT(*) FROM moon;\n</code></pre> </li> <li> <p>Advanced Relationship Queries</p> Stars in Specific GalaxyPlanets with Moons CountPotentially Habitable WorldsMoons with Water Ice <pre><code>SELECT s.name, s.mass_in_solar_masses, s.temperature_in_kelvin\nFROM star s\nJOIN galaxy g ON s.galaxy_id = g.galaxy_id\nWHERE g.name = 'Milky Way'\nORDER BY s.mass_in_solar_masses DESC;\n</code></pre> <pre><code>SELECT \n    p.name AS planet_name,\n    s.name AS star_name,\n    COUNT(m.moon_id) AS moon_count\nFROM planet p\nJOIN star s ON p.star_id = s.star_id\nLEFT JOIN moon m ON p.planet_id = m.planet_id\nGROUP BY p.planet_id, p.name, s.name\nORDER BY moon_count DESC;\n</code></pre> <pre><code>SELECT \n    p.name AS planet_name,\n    s.name AS star_name,\n    g.name AS galaxy_name\nFROM planet p\nJOIN star s ON p.star_id = s.star_id\nJOIN galaxy g ON s.galaxy_id = g.galaxy_id\nWHERE p.has_atmosphere = true \nAND p.distance_from_star_in_au BETWEEN 0.5 AND 2.0\nAND s.is_main_sequence = true;\n</code></pre> <pre><code>SELECT \n    m.name AS moon_name,\n    p.name AS planet_name,\n    s.name AS star_name\nFROM moon m\nJOIN planet p ON m.planet_id = p.planet_id\nJOIN star s ON p.star_id = s.star_id\nWHERE m.has_water_ice = true\nORDER BY m.radius_in_kilometers DESC;\n</code></pre> </li> <li> <p>Statistical Analysis Queries</p> Average Planet Size by Star TypeGalaxy Mass Distribution <pre><code>SELECT \n    CASE \n        WHEN s.is_main_sequence THEN 'Main Sequence'\n        ELSE 'Other'\n    END AS star_type,\n    AVG(p.radius_in_earth_radii) AS avg_planet_radius,\n    COUNT(p.planet_id) AS planet_count\nFROM planet p\nJOIN star s ON p.star_id = s.star_id\nGROUP BY s.is_main_sequence;\n</code></pre> <pre><code>SELECT \n    galaxy_type,\n    AVG(estimated_mass) AS avg_mass,\n    COUNT(*) AS galaxy_count\nFROM galaxy\nWHERE estimated_mass IS NOT NULL\nGROUP BY galaxy_type\nORDER BY avg_mass DESC;\n</code></pre> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Database Design</p> <ul> <li>Creating normalized relational schemas</li> <li>Implementing hierarchical relationships</li> <li>Using appropriate data types for astronomical data</li> <li>Setting up proper constraints and keys</li> </ul> </li> <li> <p>PostgreSQL Features</p> <ul> <li>SERIAL primary keys with auto-increment</li> <li>NUMERIC data types for precision measurements</li> <li>BOOLEAN flags for classification</li> <li>TEXT fields for detailed descriptions</li> <li>Foreign key relationships</li> </ul> </li> <li> <p>SQL Querying</p> <ul> <li>Complex multi-table JOINs</li> <li>Aggregate functions and GROUP BY</li> <li>Conditional logic with CASE statements</li> <li>Subqueries and data filtering</li> <li>Statistical analysis queries</li> </ul> </li> <li> <p>Data Modeling</p> <ul> <li>Astronomical object relationships</li> <li>Scientific data representation</li> <li>Hierarchical data structures</li> <li>Constraint implementation</li> </ul> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#key-technical-concepts","title":"\ud83d\udd0d Key Technical Concepts","text":"<ul> <li>Normalization: Separating different celestial object types into related tables</li> <li>Foreign Keys: Maintaining referential integrity across the hierarchy</li> <li>Data Types: Using appropriate PostgreSQL types for scientific measurements</li> <li>Constraints: Implementing NOT NULL and UNIQUE constraints</li> <li>Relationships: One-to-many relationships throughout the hierarchy</li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#data-coverage","title":"\ud83c\udfc6 Data Coverage","text":"<p>The database contains:</p> <ul> <li>Galaxies: 6+ major galaxies including Milky Way, Andromeda</li> <li>Stars: 6+ stars including our Sun and notable stellar objects</li> <li>Planets: 12+ planets from our solar system and exoplanets</li> <li>Moons: 20+ natural satellites from various planetary systems</li> <li>Galaxy Types: Classification system for different galaxy morphologies</li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#testing-and-validation","title":"\ud83d\udcc8 Testing and Validation","text":"<ul> <li> <p>FreeCodeCamp Test Verification     </p><pre><code>-- Check table structure\n\\dt\n\n-- Verify row counts\nSELECT \n    'galaxy' as table_name, COUNT(*) as row_count FROM galaxy\nUNION ALL\nSELECT 'star', COUNT(*) FROM star\nUNION ALL\nSELECT 'planet', COUNT(*) FROM planet\nUNION ALL\nSELECT 'moon', COUNT(*) FROM moon\nUNION ALL\nSELECT 'galaxy_type', COUNT(*) FROM galaxy_type;\n\n-- Test relationships\nSELECT DISTINCT g.name\nFROM galaxy g\nJOIN star s ON g.galaxy_id = s.galaxy_id;\n\nSELECT DISTINCT s.name  \nFROM star s\nJOIN planet p ON s.star_id = p.star_id;\n\nSELECT DISTINCT p.name\nFROM planet p  \nJOIN moon m ON p.planet_id = m.planet_id;\n</code></pre><p></p> </li> <li> <p>Data Export     </p><pre><code>pg_dump -cC --inserts -U freecodecamp universe &gt; universe.sql\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#potential-extensions","title":"\ud83d\ude80 Potential Extensions","text":"<p>Future enhancements could include:</p> <ul> <li>Stellar evolution and lifecycle data</li> <li>Exoplanet discovery information</li> <li>Deep space object catalogs</li> <li>Asteroid and comet tracking</li> <li>Space mission and observation data</li> <li>Constellation and star pattern mapping</li> </ul>"},{"location":"projects/assignment/relationalDatabase/celestialDB/#course-context","title":"\ud83c\udfc5 Course Context","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification, specifically the \"Build a Celestial Bodies Database\" project. It serves as a comprehensive application of database concepts including:</p> <ul> <li>Advanced database schema design</li> <li>Scientific data modeling</li> <li>Complex relationship implementation</li> <li>PostgreSQL-specific features</li> <li>Data integrity and validation</li> <li>Astronomical data representation</li> </ul> <p>The project demonstrates real-world database skills applicable to scientific data management, research databases, and specialized domain modeling.</p>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/","title":"Number Guessing Game","text":""},{"location":"projects/assignment/relationalDatabase/numberGuessing/#number-guessing-game-database-project","title":"Number Guessing Game Database Project","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification course. It demonstrates the creation and manipulation of a PostgreSQL database for a number guessing game that tracks user statistics and game history.</p>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Number Guessing Game Database project involves:</p> <ul> <li>Creating a PostgreSQL database to store user data and game statistics</li> <li>Implementing a bash script for an interactive number guessing game</li> <li>Managing user authentication and game history tracking</li> <li>Writing SQL queries to retrieve user statistics and performance data</li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<p>The database consists of two main tables with a one-to-many relationship:</p> <p>Database Schema</p> Users TableGames Table <pre><code>CREATE TABLE public.users (\n    user_id integer NOT NULL,\n    username character varying(22) NOT NULL\n);\n</code></pre> <ul> <li>user_id: Primary key, auto-incrementing integer</li> <li>username: Unique username (max 22 characters)</li> </ul> <pre><code>CREATE TABLE public.games (\n    game_id integer NOT NULL,\n    number_guesses integer NOT NULL,\n    user_id integer\n);\n</code></pre> <ul> <li>game_id: Primary key, auto-incrementing integer</li> <li>number_guesses: Number of guesses taken to complete the game</li> <li>user_id: Foreign key referencing users.user_id</li> </ul> <p>Relationships</p> <ul> <li><code>games.user_id</code> \u2192 <code>users.user_id</code> (One-to-Many: One user can have multiple games)</li> </ul> <p>Constraints</p> <ul> <li>Primary Keys: Both tables have auto-incrementing primary keys</li> <li>Foreign Key: Games table references users table</li> <li>Unique Constraint: Username must be unique</li> <li>Not Null: All essential fields are required</li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-rdb-numberguessdb/\n\u251c\u2500\u2500 number_guess.sh     # Main game script\n\u251c\u2500\u2500 number_guess.sql    # Database schema file\n\u2514\u2500\u2500 README.md           # Project documentation\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>PostgreSQL installed and running</li> <li>Bash shell environment</li> <li>FreeCodeCamp user with database privileges</li> </ul> </li> <li> <p>Database Setup</p> <ol> <li> <p>Create the database: </p><pre><code>createdb number_guessdb\n</code></pre><p></p> </li> <li> <p>Import the schema: </p><pre><code>psql -d number_guessdb -f number_guess.sql\n</code></pre><p></p> </li> </ol> </li> <li> <p>Running the Game     Execute the game script:     </p><pre><code>./number_guess.sh\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#game-mechanics","title":"\ud83c\udfae Game Mechanics","text":"<ul> <li> <p>Core Gameplay</p> <ul> <li>Objective: Guess a randomly generated number between 1 and 1000</li> <li>Feedback System: Receives \"higher\" or \"lower\" hints after each guess</li> <li>Win Condition: Game ends when the correct number is guessed</li> <li>Tracking: All games are recorded with guess count and user association</li> </ul> </li> <li> <p>User Experience Flow</p> <ol> <li>Username Input: Player enters their username</li> <li>User Recognition: <ul> <li>New users receive a welcome message</li> <li>Returning users see their game statistics</li> </ul> </li> <li>Game Start: Random number (1-1000) is generated</li> <li>Guessing Loop: Player makes guesses with directional feedback</li> <li>Game End: Victory message with guess count</li> <li>Data Recording: Game statistics saved to database</li> </ol> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#script-analysis","title":"\ud83d\udd27 Script Analysis","text":"<p>number_guess.sh Features</p> Database ConnectionUser Management SystemRandom Number GenerationInput Validation and Game LoopGame Recording <pre><code>PSQL=\"psql --username=freecodecamp --dbname=number_guessdb --no-align --tuples-only -c\"\n</code></pre> <ul> <li>Establishes connection parameters for PostgreSQL</li> <li>Uses tuples-only mode for clean data retrieval</li> </ul> <pre><code>USER_CHECK=$($PSQL \"SELECT username FROM users WHERE username='$USERNAME'\")\nif [[ -z $USER_CHECK ]]\nthen\n    REG_USER=$($PSQL \"INSERT INTO users(username) VALUES('$USERNAME')\")\n    echo \"Welcome, $USERNAME! It looks like this is your first time here.\"\nelse\n    GAME_PLAYED=$($PSQL \"SELECT COUNT(*) FROM users INNER JOIN games USING(user_id) WHERE username='$USERNAME'\")\n    BEST_GAME=$($PSQL \"SELECT MIN(number_guesses) FROM users INNER JOIN games USING(user_id) WHERE username='$USERNAME'\")\n    echo \"Welcome back, $USERNAME! You have played $GAME_PLAYED games, and your best game took $BEST_GAME guesses.\"\nfi\n</code></pre> <p>Key Logic:</p> <ul> <li>Checks if username exists in database</li> <li>Creates new user if not found</li> <li>Retrieves game statistics for returning users</li> <li>Displays personalized welcome messages</li> </ul> <pre><code>RANUM=$(( 1 + $RANDOM % 1000))\n</code></pre> <ul> <li>Generates random number between 1 and 1000</li> <li>Uses bash's built-in <code>$RANDOM</code> variable</li> </ul> <pre><code>while read NUM\ndo\n    if [[ ! $NUM =~ ^[0-9]+$ ]]\n    then\n        echo -e \"That is not an integer, guess again:\"\n    else\n        if [[ $NUM -eq $RANUM ]]\n        then\n            break;\n        elif [[ $NUM -gt $RANUM ]]\n        then\n            echo -e \"It's lower than that, guess again:\"\n        else\n            echo -e \"It's higher than that, guess again:\"\n        fi\n    fi\n    GUESS=$(($GUESS + 1))\ndone\n</code></pre> <p>Validation Features:</p> <ul> <li>Regular expression validation for integer input</li> <li>Comparative logic for directional hints</li> <li>Guess counter increment</li> <li>Loop termination on correct guess</li> </ul> <pre><code>USER_ID=$($PSQL \"SELECT user_id FROM users WHERE username='$USERNAME'\")\nINSERT_GAME=$($PSQL \"INSERT INTO games(number_guesses, user_id) VALUES($GUESS, $USER_ID)\")\n</code></pre> <ul> <li>Retrieves user ID for foreign key relationship</li> <li>Records game result in games table</li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#database-queries-and-statistics","title":"\ud83d\udcca Database Queries and Statistics","text":"<ul> <li>User Statistics Queries</li> </ul> Games Played CountBest Game PerformanceAll User Games History <pre><code>SELECT COUNT(*) FROM users \nINNER JOIN games USING(user_id) \nWHERE username='$USERNAME';\n</code></pre> <pre><code>SELECT MIN(number_guesses) FROM users \nINNER JOIN games USING(user_id) \nWHERE username='$USERNAME';\n</code></pre> <pre><code>SELECT game_id, number_guesses FROM users \nINNER JOIN games USING(user_id) \nWHERE username='$USERNAME' \nORDER BY game_id;\n</code></pre> <ul> <li>Administrative Queries</li> </ul> Top PerformersGame Statistics <pre><code>SELECT username, MIN(number_guesses) as best_score \nFROM users \nINNER JOIN games USING(user_id) \nGROUP BY username \nORDER BY best_score LIMIT 10;\n</code></pre> <pre><code>SELECT \n    COUNT(*) as total_games,\n    AVG(number_guesses) as avg_guesses,\n    MIN(number_guesses) as best_game,\n    MAX(number_guesses) as worst_game\nFROM games;\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#sample-data-analysis","title":"\ud83c\udfc6 Sample Data Analysis","text":"<p>Based on the provided database dump, the system contains:</p> <ul> <li>Users: 9 registered players</li> <li>Games: 29 completed games</li> <li>Performance Range: 7-1002 guesses per game</li> <li>User Patterns: Mix of automated test users and real players</li> </ul> <p>Notable Statistics</p> <ul> <li>Best Performance: 7 guesses (user_id: 6)</li> <li>Most Active: Users with multiple game sessions</li> <li>Efficiency Range: Demonstrates wide variation in guessing strategies</li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Database Design</p> <ul> <li>Creating normalized table structures</li> <li>Implementing one-to-many relationships</li> <li>Setting up auto-incrementing primary keys</li> <li>Managing foreign key constraints</li> </ul> </li> <li> <p>Bash Scripting</p> <ul> <li>Interactive user input handling</li> <li>Regular expression validation</li> <li>Conditional logic and loops</li> <li>Random number generation</li> <li>String manipulation and formatting</li> </ul> </li> <li> <p>SQL Operations</p> <ul> <li>User authentication queries</li> <li>Statistical aggregate functions (COUNT, MIN)</li> <li>JOIN operations for related data</li> <li>INSERT operations for data recording</li> <li>Parameterized queries for security</li> </ul> </li> <li> <p>Game Development Concepts</p> <ul> <li>User session management</li> <li>Game state tracking</li> <li>Performance metrics</li> <li>Data persistence</li> </ul> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#key-technical-concepts","title":"\ud83d\udd0d Key Technical Concepts","text":"<ul> <li> <p>Database Integration</p> <ul> <li>PSQL Command Line: Direct database interaction from bash</li> <li>Query Result Processing: Handling database responses in shell variables</li> <li>Transaction Management: Ensuring data consistency</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>Type Checking: Numeric input validation using regex</li> <li>Error Handling: Graceful handling of invalid inputs</li> <li>User Experience: Clear feedback for incorrect inputs</li> </ul> </li> <li> <p>Game Logic</p> <ul> <li>State Management: Tracking game progress and statistics</li> <li>Algorithmic Thinking: Efficient number guessing feedback system</li> <li>Performance Tracking: Recording and analyzing game metrics</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#potential-extensions","title":"\ud83d\udcc8 Potential Extensions","text":"<p>Future enhancements could include:</p> <ul> <li>Difficulty Levels: Different number ranges or limited guesses</li> <li>Multiplayer Features: Competitive modes or leaderboards  </li> <li>Enhanced Statistics: Win streaks, average performance trends</li> <li>Game Modes: Timed challenges or pattern-based games</li> <li>User Profiles: Extended user information and preferences</li> <li>Data Export: CSV or JSON export of game statistics</li> <li>Web Interface: Browser-based version of the game</li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#technical-improvements","title":"\ud83d\udee0\ufe0f Technical Improvements","text":"<ul> <li> <p>Code Optimizations</p> <ul> <li>Error Handling: More robust database connection error management</li> <li>Security: Input sanitization for SQL injection prevention</li> <li>Performance: Query optimization for large datasets</li> <li>Logging: Game session logging for debugging</li> </ul> </li> <li> <p>Feature Additions</p> <ul> <li>Game Categories: Different types of number games</li> <li>Hints System: Optional hint system for beginners</li> <li>Achievement System: Badges for various accomplishments</li> <li>Social Features: Friend systems and challenges</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/numberGuessing/#course-context","title":"\ud83c\udfc5 Course Context","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification, specifically the \"Build a Number Guessing Game\" project. It serves as a practical application of:</p> <ul> <li> <p>Database Skills</p> <ul> <li>PostgreSQL database creation and management</li> <li>Table relationships and foreign keys</li> <li>SQL query writing and optimization</li> <li>Data integrity and constraints</li> </ul> </li> <li> <p>Programming Skills</p> <ul> <li>Bash scripting and automation</li> <li>User interface design in command line</li> <li>Game logic implementation</li> <li>Error handling and validation</li> </ul> </li> <li> <p>System Integration</p> <ul> <li>Database-application integration</li> <li>Command-line tool development</li> <li>Data persistence and retrieval</li> <li>User experience design</li> </ul> </li> </ul> <p>The project demonstrates real-world skills applicable to game development, user management systems, and database-driven applications.</p>"},{"location":"projects/assignment/relationalDatabase/periodicTable/","title":"Periodic Table Database","text":""},{"location":"projects/assignment/relationalDatabase/periodicTable/#periodic-table-database-project","title":"Periodic Table Database Project","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification course. It demonstrates the creation and manipulation of a PostgreSQL database containing periodic table data with element properties and atomic information.</p>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Periodic Table Database project involves:</p> <ul> <li>Creating a PostgreSQL database to store chemical element data</li> <li>Fixing and restructuring an existing database schema</li> <li>Implementing proper relationships between elements, properties, and types</li> <li>Creating an interactive bash script to query element information</li> <li>Cleaning and reformatting existing data</li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<p>The database consists of three main tables with proper relationships:</p> <p>Database Schema</p> Elements TableProperties TableTypes Table <pre><code>CREATE TABLE public.elements (\n    atomic_number integer NOT NULL,\n    symbol character varying(2) NOT NULL,\n    name character varying(40) NOT NULL\n);\n</code></pre> <ul> <li>atomic_number: Primary key, unique identifier for each element</li> <li>symbol: Chemical symbol (e.g., 'H', 'He', 'Li')</li> <li>name: Full element name (e.g., 'Hydrogen', 'Helium', 'Lithium')</li> </ul> <pre><code>CREATE TABLE public.properties (\n    atomic_number integer NOT NULL,\n    atomic_mass DECIMAL NOT NULL,\n    melting_point_celsius DECIMAL NOT NULL,\n    boiling_point_celsius DECIMAL NOT NULL,\n    type_id integer NOT NULL\n);\n</code></pre> <ul> <li>atomic_number: Foreign key referencing elements.atomic_number</li> <li>atomic_mass: Atomic mass in atomic mass units (amu)</li> <li>melting_point_celsius: Melting point in Celsius</li> <li>boiling_point_celsius: Boiling point in Celsius</li> <li>type_id: Foreign key referencing types.type_id</li> </ul> <pre><code>CREATE TABLE public.types (\n    type_id integer NOT NULL,\n    type character varying(30) NOT NULL\n);\n</code></pre> <ul> <li>type_id: Primary key, unique identifier for element types</li> <li>type: Element type (e.g., 'metal', 'nonmetal', 'metalloid')</li> </ul> <p>Relationships</p> <ul> <li><code>properties.atomic_number</code> \u2192 <code>elements.atomic_number</code></li> <li><code>properties.type_id</code> \u2192 <code>types.type_id</code></li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-rdb-atomicdb/\n\u251c\u2500\u2500 element.sh           # Interactive bash script for querying elements\n\u251c\u2500\u2500 periodic_table.sql   # Database dump file with schema and data\n\u251c\u2500\u2500 README.md           # This documentation\n\u2514\u2500\u2500 .git/               # Git repository files\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>PostgreSQL installed and running</li> <li>Bash shell environment</li> <li>Git for version control</li> </ul> </li> <li> <p>Database Setup</p> <ol> <li> <p>Create the database: </p><pre><code>createdb periodic_table\n</code></pre><p></p> </li> <li> <p>Import the schema and data: </p><pre><code>psql -d periodic_table -f periodic_table.sql\n</code></pre><p></p> </li> </ol> </li> <li> <p>Script Usage     Make the script executable and run it:     </p><pre><code>chmod +x element.sh\n./element.sh [element_identifier]\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#scripts-description","title":"\ud83d\udd27 Scripts Description","text":"<ul> <li> <p>element.sh</p> <p>This interactive bash script allows users to query element information by providing:</p> <ul> <li>Atomic number (e.g., <code>1</code>, <code>2</code>, <code>3</code>)</li> <li>Element symbol (e.g., <code>H</code>, <code>He</code>, <code>Li</code>)</li> <li>Element name (e.g., <code>Hydrogen</code>, <code>Helium</code>, <code>Lithium</code>)</li> </ul> </li> <li> <p>Key Features:</p> <ul> <li>Input validation for different argument types</li> <li>Smart pattern matching for partial element names</li> <li>Comprehensive error handling</li> <li>Formatted output with complete element information</li> </ul> </li> <li> <p>Usage Examples: </p><pre><code>./element.sh 1          # Query by atomic number\n./element.sh H          # Query by symbol\n./element.sh Hydrogen   # Query by name\n./element.sh Hyd        # Query by partial name\n</code></pre><p></p> </li> <li> <p>Sample Output: </p><pre><code>The element with atomic number 1 is Hydrogen (H). It's a nonmetal, with a mass of 1.008 amu. Hydrogen has a melting point of -259.1 celsius and a boiling point of -252.9 celsius.\n</code></pre><p></p> element.sh <pre><code>#!/bin/bash\n\nPSQL=\"psql --username=freecodecamp --dbname=periodic_table --no-align --tuples-only -c\"\n\n#echo \"Please provide an element as an argument.\"\n\n#echo $1\nif [[ $1 ]]\nthen\nif [[ ! $1 =~ ^[0-9]+$ ]]\nthen\n    ELEMENT=$($PSQL \"SELECT atomic_number, atomic_mass, melting_point_celsius, boiling_point_celsius, symbol,name, type FROM properties JOIN elements USING(atomic_number) JOIN types USING(type_id) WHERE elements.name LIKE '$1%' ORDER BY atomic_number LIMIT 1\")\nelse\n    ELEMENT=$($PSQL \"SELECT atomic_number, atomic_mass, melting_point_celsius, boiling_point_celsius, symbol,name, type FROM properties JOIN elements USING(atomic_number) JOIN types USING(type_id) WHERE elements.atomic_number=$1\")\nfi\n    if [[ -z $ELEMENT ]]\n    then\n    echo \"I could not find that element in the database.\"\n    else\n    echo $ELEMENT | while IFS=\\| read ATOMIC_NUMBER MASS MELT BOIL SYM NAME TYPE\n    do\n        echo \"The element with atomic number $ATOMIC_NUMBER is $NAME ($SYM). It's a $TYPE, with a mass of $MASS amu. $NAME has a melting point of $MELT celsius and a boiling point of $BOIL celsius.\" \n    done\n    fi\nelse\necho \"Please provide an element as an argument.\"\nfi\n</code></pre> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#script-logic-flow","title":"\ud83c\udfaf Script Logic Flow","text":"<ul> <li> <p>Input Processing</p> <ol> <li>Argument Validation: Checks if an argument is provided</li> <li>Type Detection: Determines if input is numeric (atomic number) or text (symbol/name)</li> <li>Query Construction: Builds appropriate SQL query based on input type</li> </ol> </li> <li> <p>Database Query Logic     </p><pre><code># For numeric input (atomic number)\nif [[ $1 =~ ^[0-9]+$ ]]\nthen\n    # Direct atomic number match\n    ELEMENT=$($PSQL \"SELECT ... WHERE elements.atomic_number=$1\")\nelse\n    # Pattern match for symbol/name with LIKE\n    ELEMENT=$($PSQL \"SELECT ... WHERE elements.name LIKE '$1%' ORDER BY atomic_number LIMIT 1\")\nfi\n</code></pre><p></p> </li> <li> <p>Output Formatting</p> <ul> <li>Uses IFS (Internal Field Separator) to parse pipe-delimited results</li> <li>Formats data into human-readable sentences</li> <li>Handles edge cases and missing data gracefully</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#data-coverage","title":"\ud83d\udcca Data Coverage","text":"<p>The database contains:</p> <ul> <li>Elements: 118 chemical elements from the periodic table</li> <li>Types: 3 main categories (metal, nonmetal, metalloid)</li> <li>Properties: Complete atomic data including mass and temperature points</li> </ul> <p>Element Categories:</p> <ul> <li>Metals: Alkali metals, alkaline earth metals, transition metals, etc.</li> <li>Nonmetals: Noble gases, halogens, hydrogen, carbon, etc.</li> <li>Metalloids: Boron, silicon, germanium, arsenic, etc.</li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#database-modifications-made","title":"\ud83c\udfd7\ufe0f Database Modifications Made","text":"<ul> <li> <p>Schema Improvements</p> <ol> <li>Proper Data Types: Changed atomic_mass to DECIMAL for precision</li> <li>Constraint Addition: Added proper primary and foreign key constraints</li> <li>Column Renaming: Standardized column names for consistency</li> <li>Table Restructuring: Created separate types table for normalization</li> </ol> </li> <li> <p>Data Cleaning</p> <ul> <li>Removed trailing zeros from decimal values</li> <li>Standardized type names (lowercase)</li> <li>Ensured referential integrity across tables</li> <li>Fixed any missing or incorrect data entries</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#sql-query-examples","title":"\ud83d\udd0d SQL Query Examples","text":"<ul> <li> <p>Basic Element Lookup     </p><pre><code>-- Get element by atomic number\nSELECT * FROM elements WHERE atomic_number = 1;\n\n-- Get element by symbol\nSELECT * FROM elements WHERE symbol = 'H';\n\n-- Get element by name (case-insensitive)\nSELECT * FROM elements WHERE name ILIKE 'hydrogen';\n</code></pre><p></p> </li> <li> <p>Complex Joins     </p><pre><code>-- Get complete element information\nSELECT e.atomic_number, e.symbol, e.name, p.atomic_mass, \n    p.melting_point_celsius, p.boiling_point_celsius, t.type\nFROM elements e\nJOIN properties p ON e.atomic_number = p.atomic_number\nJOIN types t ON p.type_id = t.type_id\nWHERE e.atomic_number = 1;\n</code></pre><p></p> </li> <li> <p>Analytical Queries     </p><pre><code>-- Count elements by type\nSELECT t.type, COUNT(*) as count\nFROM types t\nJOIN properties p ON t.type_id = p.type_id\nGROUP BY t.type;\n\n-- Find elements with highest melting points\nSELECT e.name, p.melting_point_celsius\nFROM elements e\nJOIN properties p ON e.atomic_number = p.atomic_number\nORDER BY p.melting_point_celsius DESC\nLIMIT 10;\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Database Design</p> <ul> <li>Normalizing database structure</li> <li>Creating proper relationships between tables</li> <li>Implementing data integrity constraints</li> </ul> </li> <li> <p>Data Manipulation</p> <ul> <li>Cleaning and formatting existing data</li> <li>Restructuring tables and columns</li> <li>Maintaining referential integrity during modifications</li> </ul> </li> <li> <p>Shell Scripting</p> <ul> <li>Creating interactive command-line tools</li> <li>Processing user input and validation</li> <li>Integrating with PostgreSQL databases</li> </ul> </li> <li> <p>SQL Querying</p> <ul> <li>Writing complex JOIN queries</li> <li>Using pattern matching with LIKE</li> <li>Handling different data types effectively</li> </ul> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#technical-implementation-details","title":"\ud83d\udd27 Technical Implementation Details","text":"<ul> <li> <p>PostgreSQL Connection     </p><pre><code>PSQL=\"psql --username=freecodecamp --dbname=periodic_table --no-align --tuples-only -c\"\n</code></pre><p></p> <ul> <li>Uses specific username and database</li> <li>Formats output for script processing</li> <li>Removes headers and alignment for clean parsing</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>Regex Pattern: <code>^[0-9]+$</code> to detect numeric input</li> <li>Pattern Matching: LIKE operator with <code>%</code> wildcard for partial matches</li> <li>Error Handling: Graceful handling of invalid or missing elements</li> </ul> </li> <li> <p>Data Formatting</p> <ul> <li>Decimal Precision: Proper handling of floating-point numbers</li> <li>Text Processing: IFS for parsing pipe-delimited database output</li> <li>User-Friendly Output: Complete sentences with proper grammar</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#project-requirements-fulfilled","title":"\ud83d\ude80 Project Requirements Fulfilled","text":"<ul> <li> <p>User Stories Completed</p> <ol> <li>\u2705 Database contains correct tables with proper relationships</li> <li>\u2705 Script accepts atomic number, symbol, or name as arguments</li> <li>\u2705 Returns complete element information in specified format</li> <li>\u2705 Handles invalid inputs gracefully</li> <li>\u2705 Data types are properly configured (DECIMAL for precision)</li> <li>\u2705 All trailing zeros removed from atomic masses</li> <li>\u2705 Git repository with proper version control</li> </ol> </li> <li> <p>Output Format Requirements</p> <ul> <li>Atomic number, name, and symbol display</li> <li>Element type classification</li> <li>Atomic mass in amu</li> <li>Melting and boiling points in Celsius</li> <li>Proper sentence structure and grammar</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#course-context","title":"\ud83c\udfc5 Course Context","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification, specifically the \"Build a Periodic Table Database\" project. It serves as a practical application of:</p> <ul> <li>Database normalization and design principles</li> <li>SQL data manipulation and querying</li> <li>Shell scripting for database interaction</li> <li>Git version control for project management</li> <li>Data cleaning and formatting techniques</li> </ul> <p>The project demonstrates real-world database skills applicable to scientific data management, educational software development, and backend application development.</p>"},{"location":"projects/assignment/relationalDatabase/periodicTable/#potential-extensions","title":"\ud83d\udd2e Potential Extensions","text":"<p>Future enhancements could include:</p> <ul> <li>Electron configuration data</li> <li>Isotope information and radioactive properties</li> <li>Historical discovery dates and discoverers</li> <li>Physical appearance and common uses</li> <li>Chemical reaction data and compound formation</li> <li>Interactive web interface for element lookup</li> <li>Advanced search and filtering capabilities</li> <li>Export functionality for different data formats</li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/","title":"Salon Appointment Scheduler","text":""},{"location":"projects/assignment/relationalDatabase/salonDB/#salon-appointment-scheduler-database-project","title":"Salon Appointment Scheduler Database Project","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification course. It demonstrates the creation and management of a PostgreSQL database for a salon appointment scheduling system with an interactive bash script interface.</p>"},{"location":"projects/assignment/relationalDatabase/salonDB/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The Salon Appointment Scheduler project involves:</p> <ul> <li>Creating a PostgreSQL database to manage salon services and appointments</li> <li>Implementing a normalized database schema with proper relationships</li> <li>Building an interactive bash script for customer appointment booking</li> <li>Handling customer registration and appointment scheduling logic</li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<p>The database consists of three main tables with proper foreign key relationships:</p> <p>Database Schema</p> Services TableCustomers TableAppointments Table <pre><code>CREATE TABLE public.services (\n    service_id integer NOT NULL,\n    name character varying(255) NOT NULL\n);\n</code></pre> <ul> <li>service_id: Primary key, auto-incrementing integer</li> <li>name: Service name (e.g., 'Potong Rambut', 'Cukur Jenggot')</li> </ul> <pre><code>CREATE TABLE public.customers (\n    customer_id integer NOT NULL,\n    phone character varying(255) NOT NULL,\n    name character varying(255) NOT NULL\n);\n</code></pre> <ul> <li>customer_id: Primary key, auto-incrementing integer</li> <li>phone: Unique customer phone number (serves as natural identifier)</li> <li>name: Customer full name</li> </ul> <pre><code>CREATE TABLE public.appointments (\n    appointment_id integer NOT NULL,\n    customer_id integer,\n    service_id integer,\n    \"time\" character varying(255)\n);\n</code></pre> <ul> <li>appointment_id: Primary key, auto-incrementing integer</li> <li>customer_id: Foreign key referencing customers.customer_id</li> <li>service_id: Foreign key referencing services.service_id</li> <li>time: Appointment time (stored as text for flexibility)</li> </ul> <p>Relationships</p> <ul> <li><code>appointments.customer_id</code> \u2192 <code>customers.customer_id</code></li> <li><code>appointments.service_id</code> \u2192 <code>services.service_id</code></li> <li><code>customers.phone</code> has UNIQUE constraint for data integrity</li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-rdb-salondb/\n\u251c\u2500\u2500 salon.sh           # Interactive appointment booking script\n\u251c\u2500\u2500 salon.sql          # Database schema and initial data\n\u2514\u2500\u2500 README.md          # Project documentation\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/salonDB/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li> <p>Prerequisites</p> <ul> <li>PostgreSQL installed and running</li> <li>Bash shell environment</li> <li>FreeCodeCamp development environment</li> </ul> </li> <li> <p>Database Setup</p> <ol> <li> <p>Create the database: </p><pre><code>createdb salon\n</code></pre><p></p> </li> <li> <p>Import the schema and data: </p><pre><code>psql -d salon -f salon.sql\n</code></pre><p></p> </li> </ol> </li> <li> <p>Running the Application     Make the script executable and run:     </p><pre><code>chmod +x salon.sh\n./salon.sh\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#application-features","title":"\ud83d\udd27 Application Features","text":"<ul> <li> <p>Interactive Menu System     The salon.sh script provides a user-friendly interface with:</p> <p>Welcome Screen: </p><pre><code>~~~~~ WAZZALON ~~~~~\n\nWelcome to Wazzalon, how can I help you?\n</code></pre><p></p> <p>Service Selection:</p> <ul> <li>Displays all available services with numbered options</li> <li>Validates user input (numbers 1-5 only)</li> <li>Handles invalid selections with appropriate error messages</li> </ul> <p>Customer Management:</p> <ul> <li>Phone number-based customer lookup</li> <li>Automatic new customer registration</li> <li>Maintains customer data consistency</li> </ul> <p>Appointment Booking:</p> <ul> <li>Service selection validation</li> <li>Time input flexibility</li> <li>Confirmation message with booking details</li> </ul> </li> <li> <p>Script Logic Flow</p> <ol> <li> <p>Main Menu Function     </p><pre><code>MAIN_MENU() {\n# Display feedback messages\n# Query and display available services\n# Handle service selection\n# Process customer information\n# Schedule appointment\n}\n</code></pre><p></p> </li> <li> <p>Service Display</p> <ul> <li>Queries services table for available options</li> <li>Formats output as numbered list</li> <li>Handles empty service scenarios</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>Service ID: Validates numeric input (1-5 range)</li> <li>Phone Number: Used as unique customer identifier</li> <li>Customer Registration: Automatic for new customers</li> </ul> </li> <li> <p>Database Operations</p> <ul> <li>Customer Lookup: <code>SELECT name FROM customers WHERE phone='$CUSTOMER_PHONE'</code></li> <li>New Customer Insert: <code>INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME','$CUSTOMER_PHONE')</code></li> <li>Appointment Booking: <code>INSERT INTO appointments(customer_id, service_id, time) VALUES('$CUSTOMER_ID','$SERVICE_ID_SELECTED','$SERVICE_TIME')</code></li> </ul> </li> </ol> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#sample-data","title":"\ud83d\udcca Sample Data","text":"<ul> <li>Available Services Based on the database dump, the salon offers:</li> </ul> Service ID Service Name 1 Potong Rambut 2 Cukur Jenggot 3 Cabut Bulu Hidung 4 Cabut Bulu Kaki 5 Congcong Treatment <ul> <li>Sample Customer Data</li> </ul> Customer ID Phone Name 113 1234 waz 114 4321 Cal <ul> <li>Sample Appointments</li> </ul> Appointment ID Customer ID Service ID Time 73 113 5 1AM 74 113 4 2AM 75 113 2 3AM 76 114 4 5AM"},{"location":"projects/assignment/relationalDatabase/salonDB/#user-experience-flow","title":"\ud83c\udfaf User Experience Flow","text":"<ul> <li> <p>New Customer Journey</p> <ol> <li>Service Selection: Customer selects from numbered menu</li> <li>Phone Input: System prompts for phone number</li> <li>Registration: If new, customer provides name</li> <li>Time Selection: Customer chooses appointment time</li> <li>Confirmation: System confirms booking details</li> </ol> </li> <li> <p>Returning Customer Journey</p> <ol> <li>Service Selection: Customer selects from numbered menu</li> <li>Phone Input: System identifies existing customer</li> <li>Time Selection: Customer chooses appointment time</li> <li>Confirmation: System confirms booking with customer name</li> </ol> </li> <li> <p>Example Interaction     </p><pre><code>~~~~~ WAZZALON ~~~~~\n\nWelcome to Wazzalon, how can I help you?\n1) Potong Rambut\n2) Cukur Jenggot\n3) Cabut Bulu Hidung\n4) Cabut Bulu Kaki\n5) Congcong Treatment\n2\n\nWhat's your phone number?\n555-1234\n\nI don't have a record for that phone number, what's your name?\nJohn Doe\n\nWhat time would you like your Cukur Jenggot, John Doe?\n10:30AM\n\nI have put you down for a Cukur Jenggot at 10:30AM, John Doe.\n</code></pre><p></p> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#technical-implementation-details","title":"\ud83d\udd0d Technical Implementation Details","text":"<ul> <li> <p>Database Connection     </p><pre><code>PSQL=\"psql -X --username=freecodecamp --dbname=salon --tuples-only -c\"\n</code></pre><p></p> <ul> <li>Uses tuples-only mode for clean output</li> <li>Connects with freecodecamp user</li> <li>Targets salon database specifically</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Invalid Service Selection: \"That's not a number\"</li> <li>Service Not Found: \"I could not find that service. What would you like today?\"</li> <li>Empty Services: \"Sorry, we dont have any service available right now\"</li> </ul> </li> <li> <p>Data Processing</p> <ul> <li>String Trimming: Uses <code>sed -r 's/^ *| *$//g'</code> to clean customer names</li> <li>Input Validation: Regex pattern <code>^[1-5]+$</code> for service selection</li> <li>Conditional Logic: Nested if-else statements for flow control</li> </ul> </li> <li> <p>Security Considerations</p> <ul> <li>Uses parameterized queries through variables</li> <li>Input validation prevents basic injection attempts</li> <li>Phone number serves as natural unique identifier</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#key-features","title":"\ud83c\udfc6 Key Features","text":"<ul> <li> <p>Database Design</p> <ul> <li>Normalized Structure: Separate entities for services, customers, and appointments</li> <li>Referential Integrity: Foreign key constraints ensure data consistency</li> <li>Scalability: Auto-incrementing IDs support unlimited records</li> </ul> </li> <li> <p>User Interface</p> <ul> <li>Intuitive Navigation: Numbered menu system</li> <li>Error Recovery: Invalid inputs return to main menu with helpful messages</li> <li>Personalization: Uses customer names in confirmations</li> </ul> </li> <li> <p>Business Logic</p> <ul> <li>Customer Recognition: Phone-based identification system</li> <li>Automatic Registration: Seamless onboarding for new customers</li> <li>Flexible Scheduling: Text-based time input allows various formats</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#potential-extensions","title":"\ud83d\udcc8 Potential Extensions","text":"<p>Future enhancements could include:</p> <ul> <li>Service Pricing: Add cost information to services table</li> <li>Appointment Duration: Track service duration for scheduling</li> <li>Staff Management: Add stylists/employees table</li> <li>Appointment Status: Track confirmed, completed, cancelled appointments</li> <li>Customer History: Query past appointments and preferences</li> <li>Time Validation: Implement proper time format validation</li> <li>Conflict Detection: Prevent double-booking of time slots</li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#learning-objectives","title":"\ud83c\udf93 Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Database Management</p> <ul> <li>Creating and managing PostgreSQL databases</li> <li>Implementing normalized table structures</li> <li>Setting up foreign key relationships</li> <li>Writing efficient SQL queries</li> </ul> </li> <li> <p>Bash Scripting</p> <ul> <li>Interactive menu systems</li> <li>Input validation and error handling</li> <li>String manipulation and formatting</li> <li>Database integration with shell scripts</li> </ul> </li> <li> <p>Application Development</p> <ul> <li>User experience design</li> <li>Business logic implementation</li> <li>Data validation and sanitization</li> <li>Error handling and recovery</li> </ul> </li> <li> <p>Software Engineering Principles</p> <ul> <li>Separation of concerns (database vs. application logic)</li> <li>Input validation and security</li> <li>User-friendly interface design</li> <li>Maintainable code structure</li> </ul> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/salonDB/#course-context","title":"\ud83c\udfc5 Course Context","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification, specifically the \"Build a Salon Appointment Scheduler\" project. It serves as a practical application of:</p> <ul> <li>Database Design: Creating normalized schemas with proper relationships</li> <li>SQL Operations: INSERT, SELECT, and conditional queries</li> <li>Bash Programming: Interactive scripts with database integration</li> <li>User Interface Design: Command-line application development</li> <li>Business Logic: Real-world appointment scheduling system</li> </ul> <p>The project simulates a real salon management system, demonstrating skills applicable to:</p> <ul> <li>Small business management systems</li> <li>Appointment scheduling applications</li> <li>Customer relationship management (CRM)</li> <li>Interactive command-line tools</li> <li>Database-driven applications</li> </ul>"},{"location":"projects/assignment/relationalDatabase/salonDB/#technical-requirements-met","title":"\ud83d\udd27 Technical Requirements Met","text":"<ul> <li> <p>FreeCodeCamp Specifications</p> <ul> <li>\u2705 Interactive bash script named <code>salon.sh</code></li> <li>\u2705 PostgreSQL database with proper schema</li> <li>\u2705 Service selection with numbered menu</li> <li>\u2705 Customer phone number identification</li> <li>\u2705 New customer registration</li> <li>\u2705 Appointment scheduling functionality</li> <li>\u2705 Proper error handling and validation</li> <li>\u2705 Confirmation messages with customer details</li> </ul> </li> <li> <p>Database Constraints</p> <ul> <li>\u2705 Primary keys on all tables</li> <li>\u2705 Foreign key relationships</li> <li>\u2705 Unique constraint on customer phone</li> <li>\u2705 Proper data types and lengths</li> <li>\u2705 Auto-incrementing ID sequences</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/","title":"World Cup Database","text":""},{"location":"projects/assignment/relationalDatabase/worldCupDB/#world-cup-database-project","title":"World Cup Database Project","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification course. It demonstrates the creation and manipulation of a PostgreSQL database containing World Cup tournament data from 2014 and 2018.</p>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>The World Cup Database project involves:</p> <ul> <li>Creating a PostgreSQL database to store World Cup tournament data</li> <li>Implementing database schema with proper relationships</li> <li>Importing data from CSV files using shell scripts</li> <li>Writing complex SQL queries to extract meaningful insights</li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<p>The database consists of two main tables:</p> <p>Database Schema</p> Teams TableGames Table <pre><code>CREATE TABLE public.teams (\n   team_id integer NOT NULL,\n   name character varying(255) NOT NULL\n);\n</code></pre> <ul> <li>team_id: Primary key, auto-incrementing integer</li> <li>name: Unique team name (e.g., 'France', 'Croatia')</li> </ul> <pre><code>CREATE TABLE public.games (\n   game_id integer NOT NULL,\n   winner_id integer NOT NULL,\n   opponent_id integer NOT NULL,\n   winner_goals integer NOT NULL,\n   opponent_goals integer NOT NULL,\n   year integer NOT NULL,\n   round character varying(255) NOT NULL\n);\n</code></pre> <ul> <li>game_id: Primary key, auto-incrementing integer</li> <li>winner_id: Foreign key referencing teams.team_id</li> <li>opponent_id: Foreign key referencing teams.team_id</li> <li>winner_goals: Number of goals scored by the winning team</li> <li>opponent_goals: Number of goals scored by the opponent team</li> <li>year: Tournament year (2014 or 2018)</li> <li>round: Tournament round (Final, Semi-Final, Quarter-Final, etc.)</li> </ul> <p>Relationships</p> <ul> <li><code>games.winner_id</code> \u2192 <code>teams.team_id</code></li> <li><code>games.opponent_id</code> \u2192 <code>teams.team_id</code></li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fcc-rdb-worldcupdb/\n\u251c\u2500\u2500 insert_data.sh      # Script to populate the database\n\u251c\u2500\u2500 queries.sh          # Script with predefined queries\n\u251c\u2500\u2500 worldcup.sql        # Database dump file\n\u251c\u2500\u2500 games.csv           # Source data file\n\u2514\u2500\u2500 README.md           # This documentation\n</code></pre>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#setup-instructions","title":"\ud83d\ude80 Setup Instructions","text":"<ul> <li>Prerequisites</li> <li>PostgreSQL installed and running</li> <li>Bash shell environment</li> <li> <p>CSV data file (games.csv)</p> </li> <li> <p>Database Setup</p> </li> </ul> Create the databaseImport the schema <pre><code>createdb worldcup\n</code></pre> <pre><code>psql -d worldcup -f worldcup.sql\n</code></pre> <ul> <li>Data Import</li> </ul> Run the data insertion script <pre><code>./insert_data.sh\n</code></pre> <p>The script will:</p> <ul> <li>Read data from <code>games.csv</code></li> <li>Insert unique team names into the teams table</li> <li>Insert game records with proper foreign key relationships</li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#scripts-description","title":"\ud83d\udd27 Scripts Description","text":"<ul> <li> <p>insert_data.sh</p> <p>This script processes the CSV file and populates the database:</p> <p>Key Features:</p> <ul> <li>Handles both test and production environments</li> <li>Truncates existing data before insertion</li> <li>Reads CSV line by line using IFS (Internal Field Separator)</li> <li>Checks for existing teams before insertion</li> <li>Maintains referential integrity</li> </ul> <p>Logic Flow:</p> <ol> <li>Truncate both tables to start fresh</li> <li>For each CSV row:<ul> <li>Check if winner team exists, insert if not</li> <li>Check if opponent team exists, insert if not</li> <li>Insert game record with team IDs</li> </ul> </li> </ol> insert_data.sh <pre><code>#! /bin/bash\n\nif [[ $1 == \"test\" ]]\nthen\nPSQL=\"psql --username=postgres --dbname=worldcuptest -t --no-align -c\"\nelse\nPSQL=\"psql --username=freecodecamp --dbname=worldcup -t --no-align -c\"\nfi\n\n# Do not change code above this line. Use the PSQL variable above to query your database.\n\necho $($PSQL \"TRUNCATE TABLE games, teams\")\n\ncat games.csv | while IFS=\",\" read YR RND WIN OPP W_GOAL O_GOAL \ndo\n# echo $YR, $RND, $WIN\n\nTEAMW=$($PSQL \"SELECT team_id FROM teams WHERE name='$WIN'\")\n\nif [[ $WIN != \"winner\" ]]\nthen\n   if [[ -z $TEAMW ]]\n   then\n      IN_W_ID=$($PSQL \"INSERT INTO teams(name) VALUES('$WIN')\")\n      if [[ $IN_W_ID == \"INSERT 0 1\" ]]\n      then\n      echo Inserted into winner, $WIN\n      fi\n   fi\nfi\n\nTEAML=$($PSQL \"SELECT team_id FROM teams WHERE name='$OPP'\")\n\nif [[ $OPP != \"opponent\" ]]\nthen\n   if [[ -z $TEAML ]]\n   then\n      IN_O_ID=$($PSQL \"INSERT INTO teams(name) VALUES('$OPP')\")\n      if [[ $IN_W_ID == \"INSERT 0 1\" ]]\n      then\n      echo Inserted into opponent, $OPP\n      fi\n   fi\nfi\n\nTEAM_ID_W=$($PSQL \"SELECT team_id FROM teams WHERE name='$WIN'\")\nTEAM_ID_L=$($PSQL \"SELECT team_id FROM teams WHERE name='$OPP'\")\n\nif [[ -n $EAM_ID_W || -n $TEAM_ID_L ]]\nthen\n   if [[ $YR != \"year\" ]]\n   then\n      IN_GAME=$($PSQL \"INSERT INTO games(winner_id, opponent_id, winner_goals, opponent_goals, year, round) VALUES('$TEAM_ID_W','$TEAM_ID_L','$W_GOAL','$O_GOAL','$YR','$RND')\")\n      if [[ $IN_GAME == \"INSERT 0 1\" ]]\n      then\n      echo Insert game history, $YR\n      fi\n   fi\nfi\n\ndone\n</code></pre> </li> <li> <p>queries.sh</p> <p>Contains predefined queries demonstrating various SQL operations:</p> <p>Query Examples:</p> <ul> <li>Aggregate functions (SUM, AVG, COUNT, MAX)</li> <li>JOIN operations between tables</li> <li>Filtering with WHERE clauses</li> <li>String pattern matching with LIKE</li> <li>Data formatting and type casting</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#queriessh-tasks-and-sql-execution","title":"\ud83d\udcca queries.sh Tasks and SQL Execution","text":"<p>The <code>queries.sh</code> script contains 12 specific database queries required by the FreeCodeCamp assignment. Each query demonstrates different SQL concepts and returns specific tournament statistics.</p> <ul> <li> <p>Execution Instructions     Run the queries script:     </p><pre><code>./queries.sh\n</code></pre><p></p> </li> <li> <p>Query Tasks and Expected Results</p> 1. Total Goals by Winning Teams2. Total Goals in All Games3. Average Goals by Winning Teams4. Average Goals by Winning Teams (Rounded)5. Average Goals in All Games6. Highest Goals in Single Game7. High-Scoring Games Count8. 2018 Tournament Winner9. 2014 Eighth-Final Teams10. All Winning Teams11. Tournament Champions12. Teams Starting with 'Co' <p>Task: Calculate the sum of all goals scored by winning teams </p><pre><code>SELECT SUM(winner_goals) FROM games;\n</code></pre> Expected Output: <code>68</code><p></p> <p>Task: Calculate the sum of all goals scored by both teams combined </p><pre><code>SELECT SUM(winner_goals + opponent_goals) FROM games;\n</code></pre> Expected Output: <code>90</code><p></p> <p>Task: Calculate the average number of goals scored by winning teams </p><pre><code>SELECT AVG(winner_goals) FROM games;\n</code></pre> Expected Output: <code>2.1250000000000000</code><p></p> <p>Task: Same as above but rounded to 2 decimal places </p><pre><code>SELECT AVG(winner_goals)::NUMERIC(10,2) FROM games;\n</code></pre> Expected Output: <code>2.13</code><p></p> <p>Task: Calculate the average total goals per game from both teams </p><pre><code>SELECT AVG(winner_goals + opponent_goals) FROM games;\n</code></pre> Expected Output: <code>2.8125000000000000</code><p></p> <p>Task: Find the maximum goals scored by one team in a single game </p><pre><code>SELECT MAX(winner_goals) FROM games;\n</code></pre> Expected Output: <code>7</code><p></p> <p>Task: Count games where the winning team scored more than 2 goals </p><pre><code>SELECT COUNT(*) FROM games WHERE winner_goals &gt; 2;\n</code></pre> Expected Output: <code>6</code><p></p> <p>Task: Get the name of the team that won the 2018 World Cup </p><pre><code>SELECT name FROM teams \nINNER JOIN games ON teams.team_id = games.winner_id \nWHERE round = 'Final' AND year = 2018;\n</code></pre> Expected Output: <code>France</code><p></p> <p>Task: List all teams that played in the 2014 Eighth-Final round </p><pre><code>SELECT name FROM teams \nINNER JOIN games ON teams.team_id = games.winner_id \n   OR teams.team_id = games.opponent_id \nWHERE round = 'Eighth-Final' AND year = 2014 \nORDER BY name;\n</code></pre> Expected Output:  <pre><code>Algeria\nArgentina\nBelgium\nBrazil\nChile\nColombia\nCosta Rica\nFrance\nGermany\nGreece\nMexico\nNetherlands\nNigeria\nSwitzerland\nUnited States\nUruguay\n</code></pre><p></p> <p>Task: List all unique team names that won at least one game </p><pre><code>SELECT DISTINCT(name) FROM teams \nINNER JOIN games ON teams.team_id = games.winner_id \nORDER BY name;\n</code></pre> Expected Output: All teams that appear as winners (16 teams)<p></p> <p>Task: Show the year and team name of World Cup winners </p><pre><code>SELECT year, name FROM teams \nINNER JOIN games ON teams.team_id = games.winner_id \nWHERE round = 'Final' AND (year = 2018 OR year = 2014) \nORDER BY year;\n</code></pre> Expected Output: <pre><code>2014|Germany\n2018|France\n</code></pre><p></p> <p>Task: Find all teams whose names start with 'Co' </p><pre><code>SELECT name FROM teams WHERE name LIKE 'Co%';\n</code></pre> Expected Output: <pre><code>Colombia\nCosta Rica\n</code></pre><p></p> </li> <li> <p>SQL Concepts Demonstrated</p> <ul> <li> <p>Aggregate Functions</p> <ul> <li>SUM(): Total calculations across multiple records</li> <li>AVG(): Mean values with optional formatting</li> <li>COUNT(): Record counting with conditions</li> <li>MAX(): Finding maximum values</li> </ul> </li> <li> <p>JOIN Operations</p> <ul> <li>INNER JOIN: Combining related tables</li> <li>Multiple JOIN conditions: Using OR for winner/opponent relationships</li> <li>Table aliases: Simplifying complex queries</li> </ul> </li> <li> <p>Data Filtering</p> <ul> <li>WHERE clauses: Conditional filtering</li> <li>Comparison operators: <code>&gt;</code>, <code>=</code>, <code>OR</code></li> <li>Pattern matching: <code>LIKE</code> with wildcards</li> </ul> </li> <li> <p>Data Formatting</p> <ul> <li>Type casting: <code>::NUMERIC(10,2)</code> for decimal precision</li> <li>DISTINCT: Removing duplicate results</li> <li>ORDER BY: Sorting results alphabetically/numerically</li> </ul> </li> <li> <p>Advanced Techniques</p> <ul> <li>Subqueries: Implicit through JOIN operations</li> <li>Conditional logic: Multiple WHERE conditions</li> <li>String operations: Pattern matching with LIKE</li> </ul> </li> </ul> </li> <li> <p>Testing Your Implementation</p> <p>To verify your queries work correctly:</p> <ol> <li> <p>Run the script:    </p><pre><code>./queries.sh\n</code></pre><p></p> </li> <li> <p>Compare outputs: Match your results with the expected outputs above</p> </li> <li> <p>Debug common issues:</p> <ul> <li>Ensure database is properly populated</li> <li>Check for typos in SQL syntax</li> <li>Verify table relationships are correct</li> </ul> </li> </ol> </li> <li> <p>Performance Notes</p> <ul> <li>Queries use indexed columns (primary/foreign keys) for optimal performance</li> <li>JOIN operations are efficient due to proper relationship design</li> <li>DISTINCT operations may be slower on larger datasets</li> </ul> </li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#data-coverage","title":"\ud83c\udfc6 Data Coverage","text":"<p>The database contains:</p> <ul> <li>Years: 2014 and 2018 World Cup tournaments</li> <li>Teams: 24 unique national teams</li> <li>Games: 32 tournament matches</li> <li>Rounds: Final, Third Place, Semi-Final, Quarter-Final, Eighth-Final</li> </ul> <p>Teams Included</p> <p>France, Croatia, Belgium, England, Russia, Sweden, Brazil, Uruguay, Colombia, Switzerland, Japan, Mexico, Denmark, Spain, Portugal, Argentina, Germany, Netherlands, Costa Rica, Chile, Nigeria, Algeria, Greece, United States</p>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>This project demonstrates proficiency in:</p> <ol> <li> <p>Database Design</p> <ul> <li>Creating normalized table structures</li> <li>Implementing foreign key relationships</li> <li>Setting up proper constraints</li> </ul> </li> <li> <p>Data Import/ETL</p> <ul> <li>Processing CSV files with shell scripts</li> <li>Handling data validation and deduplication</li> <li>Maintaining referential integrity during import</li> </ul> </li> <li> <p>SQL Querying</p> <ul> <li>Writing complex JOIN queries</li> <li>Using aggregate functions</li> <li>Implementing conditional logic</li> <li>String manipulation and pattern matching</li> </ul> </li> <li> <p>Shell Scripting</p> <ul> <li>File processing and data manipulation</li> <li>PostgreSQL integration</li> <li>Environment-specific configurations</li> </ul> </li> </ol>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#key-technical-concepts","title":"\ud83d\udd0d Key Technical Concepts","text":"<ul> <li>Normalization: Separating teams and games into related tables</li> <li>Foreign Keys: Ensuring data integrity across tables</li> <li>PSQL Integration: Using command-line PostgreSQL operations</li> <li>CSV Processing: Reading and parsing structured data files</li> <li>Conditional Logic: Implementing data validation in shell scripts</li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#potential-extensions","title":"\ud83d\udcc8 Potential Extensions","text":"<p>Future enhancements could include:</p> <ul> <li>Additional tournament years</li> <li>Player statistics and lineups</li> <li>Match locations and venues</li> <li>Tournament bracket visualization</li> <li>Performance analytics and trends</li> </ul>"},{"location":"projects/assignment/relationalDatabase/worldCupDB/#course-context","title":"\ud83c\udfc5 Course Context","text":"<p>This project is part of the FreeCodeCamp Relational Database Certification, specifically the \"Build a World Cup Database\" project. It serves as a practical application of database concepts including:</p> <ul> <li>Database creation and management</li> <li>Table relationships and foreign keys</li> <li>Data import and validation</li> <li>Complex SQL query writing</li> <li>Shell script automation</li> </ul> <p>The project demonstrates real-world database skills applicable to sports analytics, data management, and backend development roles.</p>"},{"location":"projects/dataStructureAlgorithm/fibonacciIndex/","title":"fibonacciIndex","text":""},{"location":"projects/dataStructureAlgorithm/flexibleFizzBuzz/","title":"flexibleFizzBuzz","text":""},{"location":"projects/dataStructureAlgorithm/longestPalindrome/","title":"longestPalindrome","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/","title":"1to50 Puzzle Automation Project","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/#1to50-puzzle-automation-project","title":"1to50 Puzzle Automation Project","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/#project-overview","title":"Project Overview","text":"<p>The 1to50 Puzzle Automation Project is designed to automate the process of solving the 1to50 puzzle game using Selenium with Python. This project demonstrates how to use web automation techniques to interact with and solve a web-based puzzle game by replicating human actions in an efficient and accurate manner.</p> <p>Try the puzzle for yourself on 1to50 puzzle. Let's see if you can keep up </p>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#installation-guide","title":"Installation Guide","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x: Ensure that Python 3.x is installed on your system.</li> <li>Chrome Browser: The Chrome browser is required for running the automation script.</li> <li>ChromeDriver: The WebDriver that interacts with Chrome.</li> </ul>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Install Python: Download and install Python from python.org.</li> <li> <p>Set Up a Virtual Environment (Optional but recommended):</p> Bash<pre><code>python -m venv venv\n</code></pre> <p>Activate the virtual environment:</p> <ul> <li> <p>On Windows: </p>PowerShell<pre><code>venv\\Scripts\\activate\n</code></pre><p></p> </li> <li> <p>On macOS/Linux: </p>Unix<pre><code>source venv/bin/activate\n</code></pre><p></p> </li> </ul> </li> <li> <p>Install Dependencies:</p> <p>Create a requirement.txt file with the following content: </p>text<pre><code>selenium\n</code></pre> Install dependencies: bash<pre><code>pip install -r requirement.txt\n</code></pre><p></p> </li> <li> <p>Download and Configure ChromeDriver:</p> <ul> <li>Download ChromeDriver from chromedriver.chromium.org.</li> <li>Ensure that the version of ChromeDriver matches your Chrome browser version.</li> <li>Place chromedriver in a directory included in your system's PATH or specify the path in the <code>1to50.py</code> file.</li> </ul> </li> </ol>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#usage-instructions","title":"Usage Instructions","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/#running-the-automation-script","title":"Running the Automation Script","text":"<ol> <li>Open a Terminal or Command Prompt.</li> <li>Navigate to the Project Directory:     bash<pre><code>cd path/to/project\n</code></pre></li> <li>Run the Script:     bash<pre><code>python 1to50.py\n</code></pre>     The script will open Chrome, interact with the 1to50 puzzle game, and attempt to solve it.</li> </ol>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#example-output","title":"Example Output","text":"<ul> <li>The browser will automatically open, and you will see the puzzle being solved in real-time.</li> <li>The final result will be displayed in the terminal or saved to a log file, depending on the script configuration.</li> </ul>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#code-structure","title":"Code Structure","text":""},{"location":"projects/dataStructureAlgorithm/webQuiz/#directory-layout","title":"Directory Layout","text":"<ul> <li><code>1to50.py</code>: The main script that initializes the WebDriver, interacts with the puzzle game, and solves the puzzle.</li> <li><code>app.log</code>: The logging module or an external script for capturing output.</li> <li><code>requirement.txt</code>: Lists the Python dependencies required for the project.</li> </ul>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#code-logic","title":"Code Logic","text":"<ul> <li>Algorithm Flowchart  <pre><code>flowchart TB\n    Start((Start))\n    End((End))\n    subgraph Selenium Webdriver\n\n    Step1[\"Open Chrome &lt;br&gt;Browser\"]\n    Step2[\"navigate URL &lt;br&gt;to 1to50 Puzzle\"]\n    Step3a[\"Inspect Web Element\"]\n    Step8[\"Close Browser\"]\n    end\n\n    subgraph Puzzle Solver\n    Step3[\"Get Number 1 Element &lt;br&gt;address using Xpath\"]\n    Step4[\"Put element locator&lt;br&gt; into while loop\"]\n    Step5[\"Get final &lt;br&gt;timestamp result\"]\n    end\n\n    subgraph Data log\n    Step7[\"create log file\"]\n    Step6[\"Export Log file\"]\n    end\n\n    Start--&gt;Step1\n    Start--&gt;Step7\n    Step1--&gt;Step2\n    Step2--&gt;Step3a\n    Step3a--&gt;Step3\n    Step3--&gt;Step4\n    Step4--&gt;Step5\n    Step5--&gt;Step6\n    Step7--record all activity--&gt;Step6\n    Step5--&gt;Step8\n    Step8--&gt;End</code></pre></li> </ul>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#code-documentation","title":"Code Documentation","text":"DependenciesLog fileVariablesMain MethodNavigate URL MethodSolver MethodGetRecord Method <pre><code>import time\nimport logging\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.chrome.service import Service\n</code></pre> <pre><code># Configure logging\nlogging.basicConfig(filename='app.log', level=logging.DEBUG,\nformat='%(asctime)s - %(levelname)s - %(message)s')\n\n# Example usage\nlogging.info('This is an info message.')\nlogging.error('This is an error message.')\n</code></pre> <pre><code># ChromeDriver directory\nserv_obj = Service(\"PATH\\\\chromedriver.exe\")\n\n# Opening Chrome Browser\ndriver = webdriver.Chrome(service=serv_obj)\n</code></pre> <pre><code>def Main():\n\n    NavitageURL();\n    Solver();\n    GetRecord();\n\n    # Closing Browser\n    driver.close()\n</code></pre> <pre><code>def NavitageURL():\n\n    # Maximize Windows\n    driver.maximize_window()\n\n    # Insert Puzzle URI\n    driver.get(\"https://zzzscore.com/1to50/en/\")\n</code></pre> <pre><code>def Solver():\n    # Automation Algorithm\n    obj_count=1\n    while(obj_count!=51):\n        driver.find_element(By.XPATH, \"//div[normalize-space()='\"+str(obj_count)+\"']//span[@class='box']\").click()\n        print(\"number \"+str(obj_count)+\" are clicked\")\n        if(obj_count%51==0):\n            time.sleep(1)\n        obj_count=obj_count+1\n\n    # Complete Puzzle\n    print(\"Quiz are completed\")\n</code></pre> <pre><code>def GetRecord():\n    # Retrieve Time Record\n    time_record = driver.find_element(By.XPATH, \"(//div[@id='time'])[1]\")\n    record = time_record.text\n\n    # Display time Record\n    print(\"Congratulation! your record are \"+ record+ \" seconds\")\n    time.sleep(10)\n</code></pre>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#output-of-process","title":"Output of Process","text":"Console OutputLogfile output Python Console  <pre><code>number 1 are clicked\nnumber 2 are clicked\nnumber 3 are clicked\nnumber 4 are clicked\nnumber 5 are clicked\nnumber 6 are clicked\nnumber 7 are clicked\nnumber 8 are clicked\nnumber 9 are clicked\nnumber 10 are clicked\nnumber 11 are clicked\nnumber 12 are clicked\nnumber 13 are clicked\nnumber 14 are clicked\nnumber 15 are clicked\nnumber 16 are clicked\nnumber 17 are clicked\nnumber 18 are clicked\nnumber 19 are clicked\nnumber 20 are clicked\nnumber 21 are clicked\nnumber 22 are clicked\nnumber 23 are clicked\nnumber 24 are clicked\nnumber 25 are clicked\nnumber 26 are clicked\nnumber 27 are clicked\nnumber 28 are clicked\nnumber 29 are clicked\nnumber 30 are clicked\nnumber 31 are clicked\nnumber 32 are clicked\nnumber 33 are clicked\nnumber 34 are clicked\nnumber 35 are clicked\nnumber 36 are clicked\nnumber 37 are clicked\nnumber 38 are clicked\nnumber 39 are clicked\nnumber 40 are clicked\nnumber 41 are clicked\nnumber 42 are clicked\nnumber 43 are clicked\nnumber 44 are clicked\nnumber 45 are clicked\nnumber 46 are clicked\nnumber 47 are clicked\nnumber 48 are clicked\nnumber 49 are clicked\nnumber 50 are clicked\nQuiz are completed\nCongratulation! your record are 1.652 seconds\n</code></pre> <p>The output are quite long to show in here, you can take a look on App.log</p>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#repository","title":"Repository","text":"<p>How to clone the Project</p> <ol> <li>Go to the Project Repository on GitHub.</li> <li> <p>Clone the repository on your local machine:     </p>bash<pre><code>git init\ngit clone https://github.com/fahmiwazu/1to50.git\ngit add .\ngit commit -m \"Initial Commit\"\ngit remote add origin https://github.com/&lt;username&gt;/&lt;repository&gt;.git\n</code></pre><p></p> </li> <li> <p>Create new branch to safely explore your own project:     </p>bash<pre><code>git checkout -b feature-branch\n</code></pre><p></p> </li> </ol>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE (1) for details.</p> <ol> <li>Copyright (c) 2024 Fahmi Wahyu Wiradika  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</li> </ol>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#references-and-resources","title":"References and Resources","text":"<ul> <li>Selenium Documentation</li> <li>Python Documentation</li> <li>ChromeDriver Documentation</li> </ul>"},{"location":"projects/dataStructureAlgorithm/webQuiz/#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Special thanks to the Selenium community and contributors for their support and tools.</li> </ul>"},{"location":"projects/professional/pythonAutomation/","title":"pythonAutomation","text":""},{"location":"projects/professional/api-testing/jmeter-automation/","title":"JMeter Automation","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#performance-testing-with-apache-jmeter","title":"Performance Testing with Apache JMeter","text":"<p>A comprehensive performance testing suite for the  Simple CRUD Apps - Full-Stack Product Management System API using Apache JMeter. This project includes automated CI/CD pipelines, custom test runners, and detailed performance reporting.</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#overview","title":"\ud83c\udfaf Overview","text":"<p>This repository contains JMeter test plans and automation scripts for load testing and performance monitoring of the Product Management API. The tests simulate real-world CRUD operations and provide detailed metrics on application performance under various load conditions.</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>performance-test/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 jmeter-ci.yml                    # CI pipeline configuration\n\u2502       \u2514\u2500\u2500 jmeter-report-deployment.yml     # Report deployment workflow\n\u251c\u2500\u2500 jmeter-test-plan/\n\u2502   \u2514\u2500\u2500 simple-crud.jmx                      # Main JMeter test plan\n\u251c\u2500\u2500 reports/\n\u2502   \u251c\u2500\u2500 HTML/                                # Generated HTML reports\n\u2502   \u251c\u2500\u2500 report.jtl                           # Test results data\n\u2502   \u2514\u2500\u2500 jmeter.log                           # JMeter execution logs\n\u251c\u2500\u2500 jmeter-runner.bat                        # Simple test runner script\n\u251c\u2500\u2500 jmeter-custom-runner.bat                 # Interactive test runner\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"projects/professional/api-testing/jmeter-automation/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Automated CRUD Testing: Complete Create, Read, Update, Delete operation tests</li> <li>Parameterized Test Execution: Flexible configuration for threads, ramp-up time, duration, and loops</li> <li>CI/CD Integration: GitHub Actions workflows for automated testing</li> <li>HTML Reporting: Beautiful, interactive performance reports</li> <li>Custom Test Runners: Windows batch scripts for easy local execution</li> <li>GitHub Pages Deployment: Automated report publishing</li> <li>Performance Test Repository: JMeter Automation</li> <li>Performance Test Live Report: Performance Test</li> </ul>"},{"location":"projects/professional/api-testing/jmeter-automation/#test-configuration","title":"\ud83d\udcca Test Configuration","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#default-test-parameters","title":"Default Test Parameters","text":"<p>The test plan supports the following configurable parameters:</p> Parameter Default Description <code>threads</code> 3 Number of concurrent users <code>rampup</code> 1 Ramp-up period in seconds <code>loop</code> 1 Number of iterations per thread (-1 for infinite) <code>duration</code> 60 Test duration in seconds <code>startup_delay</code> 5 Delay before starting tests"},{"location":"projects/professional/api-testing/jmeter-automation/#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Create Product: POST request with product details</li> <li>Read Product: GET request to retrieve created product</li> <li>Update Product: PUT request to modify product data</li> <li>Delete Product: DELETE request to remove product</li> </ol>"},{"location":"projects/professional/api-testing/jmeter-automation/#local-setup","title":"\ud83d\udee0\ufe0f Local Setup","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Apache JMeter 5.5 or higher</li> <li>Java JDK 17 or higher</li> <li>Windows OS (for batch scripts) or modify scripts for your OS</li> </ul>"},{"location":"projects/professional/api-testing/jmeter-automation/#installation","title":"Installation","text":"<ol> <li> <p>Clone the Repository </p><pre><code>git clone https://github.com/fahmiwazu/performance-test.git\ncd performance-test\n</code></pre><p></p> </li> <li> <p>Install Apache JMeter</p> <ul> <li>Download JMeter from the official website</li> <li>Extract to your preferred location</li> <li>Add JMeter's <code>bin</code> directory to your system PATH</li> </ul> </li> <li> <p>Verify Installation </p><pre><code>jmeter -v\n</code></pre><p></p> </li> </ol>"},{"location":"projects/professional/api-testing/jmeter-automation/#running-tests","title":"\ud83c\udfc3\u200d\u2642\ufe0f Running Tests","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#option-1-simple-test-runner","title":"Option 1: Simple Test Runner","text":"<p>Use the basic runner for quick tests with default parameters:</p> <pre><code>jmeter-runner.bat\n</code></pre> <p>This executes the test with default settings and generates HTML reports in the <code>reports/HTML</code> directory.</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#option-2-custom-test-runner","title":"Option 2: Custom Test Runner","text":"<p>Use the interactive custom runner for parameterized testing:</p> <pre><code>jmeter-custom-runner.bat\n</code></pre> <p>The script will prompt you for: - Number of threads (users) - Ramp-up period (seconds) - Loop count (0 for infinite) - Duration (seconds, 0 to ignore) - Startup delay (seconds)</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#option-3-command-line","title":"Option 3: Command Line","text":"<p>Run tests directly with JMeter CLI:</p> <pre><code>jmeter -n -t jmeter-test-plan/simple-crud.jmx \\\n  -l reports/report.jtl \\\n  -e -o reports/HTML \\\n  -j reports/jmeter.log \\\n  -Jthreads=5 -Jrampup=10 -Jloop=5 -Jduration=60 -Jstartup_delay=5\n</code></pre>"},{"location":"projects/professional/api-testing/jmeter-automation/#cicd-integration","title":"\ud83d\udd04 CI/CD Integration","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#github-actions-workflows","title":"GitHub Actions Workflows","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#1-jmeter-ci-pipeline","title":"1. JMeter CI Pipeline","text":"<p>File: <code>.github/workflows/jmeter-ci.yml</code></p> <p>Triggers: - Push to <code>master</code> branch - Daily at 02:00 AM UTC+7 (19:00 UTC)</p> <p>Features: - Automated test execution with predefined parameters - Artifact upload (JTL reports and logs) - 3-day artifact retention</p> <p>Configuration: </p><pre><code># Test runs with: 5 users, 5 iterations, 10s ramp-up\n-Jusers=5 -Jiterations=5 -Jrampup=10\n</code></pre><p></p>"},{"location":"projects/professional/api-testing/jmeter-automation/#2-report-deployment-pipeline","title":"2. Report Deployment Pipeline","text":"<p>File: <code>.github/workflows/jmeter-report-deployment.yml</code></p> <p>Triggers: - Push to <code>master</code> branch</p> <p>Features: - Automated HTML report generation - GitHub Pages deployment - Public accessibility of test results</p> <p>Live Reports: The latest test reports are automatically deployed to GitHub Pages.</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#understanding-reports","title":"\ud83d\udcc8 Understanding Reports","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#key-metrics","title":"Key Metrics","text":"<p>The HTML reports include comprehensive performance metrics:</p> <ul> <li>Response Time: Average, median, 90th, 95th, 99th percentiles</li> <li>Throughput: Requests per second</li> <li>Error Rate: Percentage of failed requests</li> <li>Network Traffic: Sent and received bytes</li> <li>APDEX Score: Application Performance Index</li> </ul>"},{"location":"projects/professional/api-testing/jmeter-automation/#report-sections","title":"Report Sections","text":"<ol> <li>Dashboard: Overview of test execution and key statistics</li> <li>Statistics: Detailed metrics for each request type</li> <li>Over Time Charts: Response time and throughput trends</li> <li>Throughput: Requests and data transfer rates</li> <li>Response Times: Distribution and percentile analysis</li> <li>Errors: Error counts and types</li> </ol>"},{"location":"projects/professional/api-testing/jmeter-automation/#test-plan-configuration","title":"\ud83d\udd27 Test Plan Configuration","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#user-defined-variables","title":"User Defined Variables","text":"<pre><code>BASE_URL: simple-crud-apps.vercel.app\nPRODUCT_NAME: Pecak Bandeng\nPRODUCT_PRICE: 48000\nPRODUCT_QTY: 4\nUPD_NAME: Bandeng Presto\nUPD_PRICE: 45000\nUPD_QTY: 5\n</code></pre>"},{"location":"projects/professional/api-testing/jmeter-automation/#thread-group-settings","title":"Thread Group Settings","text":"<p>The thread group is configured with property placeholders for dynamic configuration:</p> <pre><code>Threads: ${__P(threads,3)}\nRamp-up: ${__P(rampup,1)}\nDuration: ${__P(duration,60)}\nStartup Delay: ${__P(startup_delay,5)}\nLoop Count: ${__P(loop,1)}\n</code></pre>"},{"location":"projects/professional/api-testing/jmeter-automation/#performance-benchmarks","title":"\ud83c\udfaf Performance Benchmarks","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#recommended-load-profiles","title":"Recommended Load Profiles","text":"<p>Light Load Testing: </p><pre><code>-Jthreads=5 -Jrampup=5 -Jloop=10 -Jduration=60\n</code></pre><p></p> <p>Medium Load Testing: </p><pre><code>-Jthreads=25 -Jrampup=30 -Jloop=20 -Jduration=300\n</code></pre><p></p> <p>Heavy Load Testing: </p><pre><code>-Jthreads=100 -Jrampup=60 -Jloop=50 -Jduration=600\n</code></pre><p></p> <p>Stress Testing: </p><pre><code>-Jthreads=500 -Jrampup=120 -Jloop=100 -Jduration=1800\n</code></pre><p></p>"},{"location":"projects/professional/api-testing/jmeter-automation/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#common-issues","title":"Common Issues","text":"<p>Issue: JMeter not found </p><pre><code># Solution: Add JMeter to PATH or update batch script with full path\nset JMETER_PATH=C:\\path\\to\\apache-jmeter-5.5\\bin\\jmeter.bat\n</code></pre><p></p> <p>Issue: No JTL file generated </p><pre><code># Check JMeter log file for errors\ntype reports\\jmeter.log\n</code></pre><p></p> <p>Issue: Empty HTML report </p><pre><code># Ensure test executed successfully and JTL file contains data\n# Verify API endpoint is accessible\n</code></pre><p></p> <p>Issue: Connection timeouts </p><pre><code># Verify target API is running\n# Check network connectivity\n# Adjust timeout settings in test plan\n</code></pre><p></p>"},{"location":"projects/professional/api-testing/jmeter-automation/#best-practices","title":"\ud83d\udcca Best Practices","text":""},{"location":"projects/professional/api-testing/jmeter-automation/#load-testing-guidelines","title":"Load Testing Guidelines","text":"<ol> <li>Start Small: Begin with light load and gradually increase</li> <li>Monitor Resources: Watch server CPU, memory, and network usage</li> <li>Baseline Testing: Establish performance baselines before optimization</li> <li>Incremental Testing: Test after each optimization</li> <li>Real-world Scenarios: Simulate actual user behavior patterns</li> </ol>"},{"location":"projects/professional/api-testing/jmeter-automation/#test-execution-tips","title":"Test Execution Tips","text":"<ul> <li>Run tests during off-peak hours for production environments</li> <li>Use consistent test data for reproducible results</li> <li>Document test configurations and results</li> <li>Archive historical reports for trend analysis</li> <li>Validate API responses in test assertions</li> </ul>"},{"location":"projects/professional/api-testing/jmeter-automation/#related-resources","title":"\ud83d\udd17 Related Resources","text":"<ul> <li>Target API: Simple CRUD Apps</li> <li>API Repository: GitHub - simple-crud-apps</li> <li>API Testing Suite: Newman Automation</li> <li>JMeter Documentation: Apache JMeter User Manual</li> </ul>"},{"location":"projects/professional/api-testing/jmeter-automation/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please follow these steps:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"projects/professional/api-testing/jmeter-automation/#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"projects/professional/api-testing/jmeter-automation/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>Apache JMeter team for the excellent testing tool</li> <li>Simple CRUD Apps project for providing the API to test</li> <li>GitHub Actions for CI/CD automation</li> </ul> <p>Happy Performance Testing! \ud83d\ude80</p>"},{"location":"projects/professional/api-testing/newman-automation/","title":"Newman Automation","text":""},{"location":"projects/professional/api-testing/newman-automation/#api-automation-testing-project","title":"API Automation Testing Project","text":"<p>A comprehensive API testing automation project using Newman (Postman CLI) with CI/CD integration and performance reporting hosted on GitHub Pages.</p>"},{"location":"projects/professional/api-testing/newman-automation/#overview","title":"\ud83d\ude80 Overview","text":"<p>This project provides automated API testing for a Node.js CRUD application with the following features:</p> <ul> <li>Local Testing: Run Newman tests locally using batch scripts</li> <li>CI/CD Integration: Automated testing on every push to master branch</li> <li>Performance Reporting: Test results hosted on GitHub Pages</li> <li>Multiple Environments: Support for development and production environments</li> <li>Comprehensive Test Coverage: Full CRUD operations testing (Create, Read, Update, Delete)</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 ci-cd.yml                    # GitHub Actions CI/CD pipeline\n\u251c\u2500\u2500 performance/\n\u2502   \u251c\u2500\u2500 performance-report.html  # Performance report from Postman GUI \n\u2502   \u2514\u2500\u2500 performance-report.pdf   # Performance report from POstman GUI \n\u251c\u2500\u2500 postman/\n\u2502   \u251c\u2500\u2500 NODE-E2E.postman_collection.json    # Postman test collection\n\u2502   \u251c\u2500\u2500 dev-env.postman_environment.json    # Development environment\n\u2502   \u2514\u2500\u2500 prod-env.postman_environment.json   # Production environment\n\u251c\u2500\u2500 script/\n\u2502   \u2514\u2500\u2500 collection-runner.bat       # Local Newman runner script\n\u251c\u2500\u2500 reports/                         # Local test reports (gitignored)\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"projects/professional/api-testing/newman-automation/#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":""},{"location":"projects/professional/api-testing/newman-automation/#local-development","title":"Local Development","text":"<ul> <li>Node.js (v18 or higher)</li> <li>Newman CLI tool</li> <li>Newman HTML reporters</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#installation","title":"Installation","text":"<pre><code># Install Newman globally\nnpm install -g newman\n\n# Install Newman reporters\nnpm install -g newman-reporter-html\nnpm install -g newman-reporter-htmlextra\n</code></pre>"},{"location":"projects/professional/api-testing/newman-automation/#running-tests","title":"\ud83c\udfc3\u200d\u2642\ufe0f Running Tests","text":""},{"location":"projects/professional/api-testing/newman-automation/#using-postman-collection-runner-gui","title":"Using Postman Collection Runner (GUI)","text":"<p>The Postman Collection Runner provides a powerful GUI interface for executing your test collection with detailed performance metrics and HTML report generation.</p>"},{"location":"projects/professional/api-testing/newman-automation/#1-import-collection-and-environment","title":"1. Import Collection and Environment","text":"<p>Option A: Import Files</p> <ol> <li>Open Postman Desktop or navigate to Postman Web</li> <li>Click Import button in the top left</li> <li>Drag and drop or select these files:<ul> <li><code>postman/NODE-E2E.postman_collection.json</code></li> <li><code>postman/prod-env.postman_environment.json</code> (for production)</li> <li><code>postman/dev-env.postman_environment.json</code> (for development)</li> </ul> </li> </ol> <p>Option B: Import via URL (if hosted on GitHub)</p> <ol> <li>Click Import \u2192 Link</li> <li>Paste the raw GitHub URLs for each file</li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#2-configure-collection-runner","title":"2. Configure Collection Runner","text":"<ol> <li>Click Collections in the sidebar</li> <li>Find your NODE-E2E collection</li> </ol> Documentation Postman GUI Collection runner option <ol> <li>Click Performance Tab</li> <li> <p>Set up your performance test:</p> <p>Performance Basic Setup:</p> <ul> <li>Load profile: Select <code>Fixed</code>, <code>Ramp up</code>, <code>Spike</code> or <code>Peak</code></li> <li>Virtual users: Set to <code>5</code> (or desired number)</li> <li>Test duration: Set to <code>1</code> (in minutes)</li> </ul> <p>Performance Metric (Pass test if):</p> <ul> <li>Metric: Response Time, Error, Requests per second</li> <li>Condition: is greater than, is less than, is less than equal to, is greater than equal to</li> <li>Value: desired number</li> </ul> </li> </ol> Documentation Fixed LoadRamp Up LoadSpike LoadPeak Load <p></p> Fixed Load Profile Testing <p></p> <p></p> Ramp Up Load Profile Testing <p></p> <p></p> Spike Load Profile Testing <p></p> <p></p> Peak Load Profile Testing <p></p>"},{"location":"projects/professional/api-testing/newman-automation/#3-execute-performance-run","title":"3. Execute Performance Run","text":"<ol> <li>Click Run NODE-E2E button</li> <li>Monitor real-time execution in the runner interface</li> <li>View detailed request/response data, test results, and timing metrics</li> <li>Watch the progress bar and individual test status</li> </ol> Documentation Postman GUI Performance collection runner test result"},{"location":"projects/professional/api-testing/newman-automation/#4-download-html-performance-report","title":"4. Download HTML Performance Report","text":"<p>After the collection run completes:</p> <ol> <li> <p>View Results Summary:</p> <ul> <li>Total requests executed</li> <li>Pass/fail test counts</li> <li>Average response time</li> <li>Individual request performance metrics</li> </ul> </li> <li> <p>Export HTML Report:</p> <ul> <li>Click Export Results button (top right of runner results)</li> <li>Select Export as HTML</li> <li>Choose download location</li> <li> <p>The HTML report includes:</p> <ul> <li>\u2705 Complete test execution summary</li> <li>\u2705 Request/response details with timing</li> <li>\u2705 Test assertions results</li> <li>\u2705 Performance metrics and charts</li> <li>\u2705 Environment variables used</li> <li>\u2705 Console logs and error details</li> </ul> </li> </ul> </li> <li> <p>Report Features:</p> <ul> <li>Interactive charts showing response times</li> <li>Detailed request/response inspection</li> <li>Color-coded test results (pass/fail)</li> <li>Performance trends across iterations</li> <li>Export-friendly format for sharing</li> </ul> </li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#5-performance-analysis","title":"5. Performance Analysis","text":"<p>The HTML report provides comprehensive performance insights:</p> <ul> <li>Response Time Analysis: Min/max/average response times per endpoint</li> <li>Throughput Metrics: Requests per second calculations</li> <li>Error Rate Tracking: Success/failure ratios</li> <li>Test Coverage: Assertion results across all test scenarios</li> <li>Timeline View: Chronological execution flow</li> <li>Performance Trends: Multi-iteration comparison</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#using-batch-script-windows","title":"Using Batch Script (Windows)","text":"<ol> <li>Update the <code>BASE_DIR</code> path in <code>script/collection-runner.bat</code> to match your project location</li> <li>Run the script: <pre><code>cd script\ncollection-runner.bat\n</code></pre></li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#using-newman-command-line","title":"Using Newman Command Line","text":"<pre><code># Run with production environment\nnewman run postman/NODE-E2E.postman_collection.json \\\n  --environment postman/prod-env.postman_environment.json \\\n  --iteration-count 5 \\\n  --reporters cli,html,json,junit \\\n  --reporter-html-export reports/newman-report.html \\\n  --reporter-json-export reports/newman-report.json \\\n  --reporter-junit-export reports/newman-report.xml \\\n  --delay-request 1000 \\\n  --timeout-request 30000\n\n# Run with development environment\nnewman run postman/NODE-E2E.postman_collection.json \\\n  --environment postman/dev-env.postman_environment.json \\\n  --iteration-count 1\n</code></pre>"},{"location":"projects/professional/api-testing/newman-automation/#cicd-pipeline","title":"\ud83d\udd04 CI/CD Pipeline","text":"<p>The project includes a comprehensive GitHub Actions workflow (<code>.github/workflows/ci-cd.yml</code>) that:</p>"},{"location":"projects/professional/api-testing/newman-automation/#test-job","title":"Test Job","text":"<ul> <li>\u2705 Runs Newman tests automatically on push to master</li> <li>\u2705 Uses production environment configuration</li> <li>\u2705 Executes 5 iterations with request delays</li> <li>\u2705 Generates multiple report formats (CLI, JSON, JUnit)</li> <li>\u2705 Uploads test artifacts for 30 days retention</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#deploy-job","title":"Deploy Job","text":"<ul> <li>\u2705 Deploys test results to GitHub Pages</li> <li>\u2705 Creates performance reports dashboard</li> <li>\u2705 Runs only after test completion</li> <li>\u2705 Updates on every master branch push</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#workflow-features","title":"Workflow Features","text":"<ul> <li>Concurrent Control: Cancels previous deployments</li> <li>Error Handling: Continues pipeline even if tests fail</li> <li>Artifact Management: Unique naming with run numbers</li> <li>Environment Flexibility: Easy switching between dev/prod</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#test-coverage","title":"\ud83d\udcca Test Coverage","text":"<p>The E2E test collection covers complete CRUD operations:</p>"},{"location":"projects/professional/api-testing/newman-automation/#create-product","title":"\ud83c\udd95 Create Product","text":"<ul> <li>Endpoint: <code>POST /api/products</code></li> <li>Validation: Schema validation, field types, MongoDB ObjectId format</li> <li>Environment: Stores created product ID for subsequent tests</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#read-product","title":"\ud83d\udcd6 Read Product","text":"<ul> <li>Endpoint: <code>GET /api/products/{id}</code></li> <li>Validation: Response structure, data integrity, field validation</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#update-product","title":"\u270f\ufe0f Update Product","text":"<ul> <li>Endpoint: <code>PUT /api/products/{id}</code></li> <li>Validation: Updated fields, schema compliance, timestamp validation</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#delete-product","title":"\ud83d\uddd1\ufe0f Delete Product","text":"<ul> <li>Endpoint: <code>DELETE /api/products/{id}</code></li> <li>Validation: Deletion confirmation, proper response format</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#test-validations-include","title":"Test Validations Include:","text":"<ul> <li>JSON Schema validation</li> <li>Field type checking (string, integer, ObjectId)</li> <li>ISO8601 timestamp format validation</li> <li>MongoDB ObjectId pattern matching</li> <li>Response key existence verification</li> <li>Business logic validation (positive values, non-empty strings)</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#environments","title":"\ud83c\udf10 Environments","text":""},{"location":"projects/professional/api-testing/newman-automation/#development-environment","title":"Development Environment","text":"<ul> <li>Base URL: <code>http://localhost:3000</code></li> <li>Test Data: Bakpia (Indonesian traditional food)</li> <li>Use Case: Local development and testing</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#production-environment","title":"Production Environment","text":"<ul> <li>Base URL: <code>https://simple-crud-apps.vercel.app</code></li> <li>Test Data: Ketoprak (Indonesian traditional food)</li> <li>Use Case: Production API testing and CI/CD</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#performance-reporting","title":"\ud83d\udcc8 Performance Reporting","text":""},{"location":"projects/professional/api-testing/newman-automation/#github-pages-integration","title":"GitHub Pages Integration","text":"<p>Test results are automatically published to GitHub Pages:</p> <ul> <li>URL: <code>https://[username].github.io/[repository-name]</code></li> <li>Content: Performance reports and test summaries</li> <li>Updates: Automatic on every master branch push</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#report-types","title":"Report Types","text":"<ol> <li>HTML Reports: Visual test execution results</li> <li>JSON Reports: Machine-readable test data</li> <li>JUnit Reports: CI/CD integration compatible</li> <li>Performance Dashboard: Hosted on GitHub Pages</li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"projects/professional/api-testing/newman-automation/#customizing-test-parameters","title":"Customizing Test Parameters","text":"<p>Edit the CI/CD workflow parameters in <code>.github/workflows/ci-cd.yml</code>:</p> <pre><code>newman run \"$COLLECTION\" \\\n  --environment \"$ENVIRONMENT\" \\\n  --iteration-count 5        # Number of test iterations\n  --timeout-request 30000    # Request timeout (30 seconds)\n  --delay-request 1000       # Delay between requests (1 second)\n</code></pre>"},{"location":"projects/professional/api-testing/newman-automation/#environment-variables","title":"Environment Variables","text":"<p>Update environment files in the <code>postman/</code> directory:</p> <ul> <li>Modify <code>baseUrl</code> for different API endpoints</li> <li>Adjust test data values (<code>productName</code>, <code>productPrice</code>, etc.)</li> <li>Configure environment-specific settings</li> </ul>"},{"location":"projects/professional/api-testing/newman-automation/#local-script-configuration","title":"Local Script Configuration","text":"<p>Update paths in <code>script/collection-runner.bat</code>: </p><pre><code>set BASE_DIR=C:\\Your\\Project\\Path\\\n</code></pre><p></p>"},{"location":"projects/professional/api-testing/newman-automation/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"projects/professional/api-testing/newman-automation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Collection/Environment Not Found</p> <ul> <li>Verify file paths in the script</li> <li>Check file names match exactly</li> <li>Ensure files are in the correct directories</li> </ul> </li> <li> <p>Newman Command Not Found</p> <ul> <li>Install Newman globally: <code>npm install -g newman</code></li> <li>Verify Node.js installation</li> <li>Check PATH environment variable</li> </ul> </li> <li> <p>API Connection Issues</p> <ul> <li>Verify API endpoint availability</li> <li>Check network connectivity</li> <li>Validate environment configuration</li> </ul> </li> <li> <p>GitHub Actions Failures</p> <ul> <li>Check workflow logs in Actions tab</li> <li>Verify repository permissions</li> <li>Ensure GitHub Pages is enabled</li> </ul> </li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#contributing","title":"\ud83d\udcdd Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Add or modify test cases in the Postman collection</li> <li>Update environment files if needed</li> <li>Test locally using the batch script</li> <li>Submit a pull request</li> </ol>"},{"location":"projects/professional/api-testing/newman-automation/#license","title":"\ud83d\udcc4 License","text":"<p>This project is open source and available under the MIT License.</p> <p>Happy Testing! \ud83d\ude80</p>"},{"location":"projects/professional/documentation/docs-portfolio/","title":"Fahmi's Project Library","text":""},{"location":"projects/professional/documentation/docs-portfolio/#fahmis-project-library","title":"Fahmi's Project Library \ud83d\udcda","text":"<p>A comprehensive online portfolio showcasing projects, certifications, and professional experience, built with MkDocs Material and deployed automatically via GitHub Actions.</p>"},{"location":"projects/professional/documentation/docs-portfolio/#features","title":"\ud83c\udf1f Features","text":"<ul> <li>Modern Documentation Site: Built with MkDocs Material theme for a professional, responsive design</li> <li>Automatic Deployment: CI/CD pipeline using GitHub Actions for seamless updates</li> <li>Project Categorization: Organized sections for Assignment Projects, Academic Research, and Work Samples</li> <li>Interactive Elements: Code highlighting, search functionality, and navigation features</li> <li>Dark/Light Theme: Toggle between themes with custom color schemes</li> <li>Social Integration: Links to GitHub, LinkedIn, Instagram, and Postman profiles</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#tech-stack","title":"\ud83d\udee0\ufe0f Tech Stack","text":"<ul> <li>Documentation Generator: MkDocs with Material Theme</li> <li>Deployment: GitHub Actions + GitHub Pages</li> <li>Styling: Custom CSS with Material Design principles</li> <li>Markdown Extensions: Enhanced with PyMdown Extensions for advanced formatting</li> <li>Version Control: Git with automated revision dates</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"projects/professional/documentation/docs-portfolio/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x</li> <li>Git</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#local-development","title":"Local Development","text":"<ol> <li> <p>Clone the repository </p><pre><code>git clone https://github.com/fahmiwazu/docs-portfolio.git\ncd docs-portfolio\n</code></pre><p></p> </li> <li> <p>Install dependencies </p><pre><code>pip install -r requirements.txt\n</code></pre><p></p> </li> <li> <p>Start development server </p><pre><code>mkdocs serve\n</code></pre><p></p> </li> <li> <p>View locally    Open your browser to <code>http://127.0.0.1:8000</code></p> </li> </ol>"},{"location":"projects/professional/documentation/docs-portfolio/#making-changes","title":"Making Changes","text":"<ol> <li>Edit markdown files in the <code>docs/</code> directory</li> <li>Modify <code>mkdocs.yml</code> for configuration changes</li> <li>Update styles in <code>docs/stylesheet/extra.css</code> if needed</li> <li>Commit and push changes - GitHub Actions will handle deployment automatically</li> </ol>"},{"location":"projects/professional/documentation/docs-portfolio/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 ci.yml                 # GitHub Actions workflow\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md              # Homepage content\n\u2502   \u251c\u2500\u2500 introduction/         # About, experience, certifications\n\u2502   \u251c\u2500\u2500 projects/             # Project documentation\n\u2502   \u2502   \u251c\u2500\u2500 assignment/       # freeCodeCamp projects\n\u2502   \u2502   \u251c\u2500\u2500 academic/         # Research projects (coming soon)\n\u2502   \u2502   \u2514\u2500\u2500 workSample/       # Professional work samples\n\u2502   \u2514\u2500\u2500 stylesheet/\n\u2502       \u2514\u2500\u2500 extra.css         # Custom styling\n\u251c\u2500\u2500 mkdocs.yml                # MkDocs configuration\n\u251c\u2500\u2500 requirements.txt          # Python dependencies\n\u2514\u2500\u2500 README.md                 # This file\n</code></pre>"},{"location":"projects/professional/documentation/docs-portfolio/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"projects/professional/documentation/docs-portfolio/#mkdocs-configuration-mkdocsyml","title":"MkDocs Configuration (<code>mkdocs.yml</code>)","text":"<p>Key features configured: - Navigation: Hierarchical menu structure - Theme: Material theme with custom colors and icons - Extensions: Code highlighting, tables, admonitions, diagrams - Plugins: Search, auto-references, git revision dates, lightbox gallery</p>"},{"location":"projects/professional/documentation/docs-portfolio/#custom-styling","title":"Custom Styling","text":"<p>The <code>docs/stylesheet/extra.css</code> file contains: - Custom color schemes for headers, links, and navigation - Responsive table styling - Admonition (callout) box formatting - Image centering utilities</p>"},{"location":"projects/professional/documentation/docs-portfolio/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"projects/professional/documentation/docs-portfolio/#automatic-deployment-cicd","title":"Automatic Deployment (CI/CD)","text":"<p>The repository uses GitHub Actions for automatic deployment:</p> <ul> <li>Trigger: Push to <code>main</code> or <code>master</code> branch</li> <li>Process: </li> <li>Checkout code</li> <li>Setup Python environment</li> <li>Install dependencies</li> <li>Build and deploy to GitHub Pages</li> <li>Caching: Weekly cache refresh for faster builds</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#manual-deployment","title":"Manual Deployment","text":"<p>If needed, you can deploy manually:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre>"},{"location":"projects/professional/documentation/docs-portfolio/#content-sections","title":"\ud83d\udcd6 Content Sections","text":""},{"location":"projects/professional/documentation/docs-portfolio/#introduction","title":"Introduction","text":"<ul> <li>About Fahmi: Personal background and skills</li> <li>Experience: Professional career journey</li> <li>Certification: Technical certifications and achievements</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#projects","title":"Projects","text":"<ul> <li>Assignment Projects: freeCodeCamp certifications</li> <li>Relational Database projects</li> <li>Backend Development &amp; APIs</li> <li>Quality Assurance projects</li> <li>Postman API Test Automation</li> <li>Academic Research: Bachelor's degree research work</li> <li>Work Samples: Professional automation tools and scripts</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#customization","title":"\ud83c\udfa8 Customization","text":""},{"location":"projects/professional/documentation/docs-portfolio/#adding-new-projects","title":"Adding New Projects","text":"<ol> <li>Create a new markdown file in the appropriate <code>docs/projects/</code> subdirectory</li> <li>Add the page to the navigation in <code>mkdocs.yml</code></li> <li>Follow the existing documentation structure and formatting</li> </ol>"},{"location":"projects/professional/documentation/docs-portfolio/#modifying-themes","title":"Modifying Themes","text":"<ul> <li>Update color schemes in <code>mkdocs.yml</code> under the <code>palette</code> section</li> <li>Modify custom CSS in <code>docs/stylesheet/extra.css</code></li> <li>Add new icons using Material Design icons</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#extending-functionality","title":"Extending Functionality","text":"<p>Add new MkDocs plugins in <code>requirements.txt</code> and configure them in <code>mkdocs.yml</code></p>"},{"location":"projects/professional/documentation/docs-portfolio/#writing-documentation","title":"\ud83d\udcdd Writing Documentation","text":"<p>This portfolio uses extended Markdown with additional features:</p> <ul> <li>Code blocks with syntax highlighting</li> <li>Admonitions for notes, warnings, and tips</li> <li>Tables with custom styling</li> <li>Diagrams using Mermaid</li> <li>Tabbed content for organized information</li> <li>Footnotes and cross-references</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License. See the repository for full license details.</p>"},{"location":"projects/professional/documentation/docs-portfolio/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Live Site: Fahmi's Project Library</li> <li>GitHub Repository: docs-portfolio</li> <li>LinkedIn: Fahmi Wahyu Wiradika</li> <li>Postman: API Collections</li> </ul>"},{"location":"projects/professional/documentation/docs-portfolio/#contact","title":"\ud83d\udce7 Contact","text":"<p>For questions or collaboration opportunities, feel free to reach out through any of the social media links provided in the portfolio.</p> <p>Built with \u2764\ufe0f using MkDocs Material and deployed with GitHub Actions</p>"},{"location":"projects/professional/frameworks/java-automation/","title":"Java Automation Test","text":""},{"location":"projects/professional/frameworks/java-automation/#java-automation-framework","title":"Java Automation Framework","text":"<p>A comprehensive test automation framework built with Java, Selenium WebDriver, REST Assured, JUnit 5, and Allure reporting. This framework supports both UI and API testing with advanced features like parallel execution, cross-browser testing, and detailed reporting.</p>"},{"location":"projects/professional/frameworks/java-automation/#features","title":"\ud83d\ude80 Features","text":""},{"location":"projects/professional/frameworks/java-automation/#core-capabilities","title":"Core Capabilities","text":"<ul> <li>UI Testing: Selenium WebDriver with cross-browser support</li> <li>API Testing: REST Assured for comprehensive API validation</li> <li>Parallel Execution: JUnit 5 parallel test execution</li> <li>Reporting: Allure reports with screenshots and detailed logs</li> <li>Cross-Browser: Chrome, Firefox, Edge, Safari, and IE support</li> <li>CI/CD Ready: GitHub Actions integration with automated report deployment</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#advanced-features","title":"Advanced Features","text":"<ul> <li>Event-Driven Logging: Comprehensive WebDriver event reporting</li> <li>Safe Actions: Enhanced element interactions with highlighting and scrolling</li> <li>Screenshot Management: Automatic failure screenshots with Allure integration</li> <li>Validation Utilities: Flexible validation framework with detailed reporting</li> <li>Configuration Management: Environment-based configuration support</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#framework-metrics","title":"\ud83d\udcc8 Framework Metrics","text":"<ul> <li>Languages: Java 19</li> <li>Test Framework: JUnit 5</li> <li>UI Automation: Selenium WebDriver 4.35.0</li> <li>API Testing: REST Assured 5.5.5</li> <li>Reporting: Allure 2.29.1</li> <li>Build Tool: Maven 3.14.0</li> <li>CI/CD: GitHub Actions</li> <li>Browsers Supported: Chrome, Firefox, Edge, Safari, IE</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>fahmi-java-framework/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/java/\n\u2502   \u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ConfigLoader.java          # Configuration loader\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 TestConfig.java            # Test configuration constants\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2502       \u251c\u2500\u2500 EventReporter.java         # WebDriver event logging\n\u2502   \u2502       \u251c\u2500\u2500 SafeAction.java            # Enhanced element interactions\n\u2502   \u2502       \u2514\u2500\u2500 ScreenshotHandler.java     # Screenshot management\n\u2502   \u251c\u2500\u2500 test/java/\n\u2502   \u2502   \u251c\u2500\u2500 base/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 BaseTests.java             # Base test class\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ScreenshotCapable.java     # Screenshot interface\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ScreenshotTestWatcher.java # Test failure handler\n\u2502   \u2502   \u251c\u2500\u2500 experimental/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 PortfolioTest.java               # Portfolio site test\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2502       \u251c\u2500\u2500 CrossBrowser.java          # Browser management\n\u2502   \u2502       \u2514\u2500\u2500 ValidationUtils.java       # Validation framework\n\u2502   \u2514\u2500\u2500 main/resources/\n\u2502       \u2514\u2500\u2500 dev.properties                 # Environment configuration\n\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 ci.yml                            # CI/CD pipeline\n\u251c\u2500\u2500 pom.xml                               # Maven dependencies\n\u2514\u2500\u2500 README.md                             # This file\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#technologies-dependencies","title":"\ud83d\udee0\ufe0f Technologies &amp; Dependencies","text":""},{"location":"projects/professional/frameworks/java-automation/#core-technologies","title":"Core Technologies","text":"<ul> <li>Java 19: Programming language</li> <li>Maven: Dependency management and build tool</li> <li>JUnit 5: Testing framework with parallel execution support</li> <li>Selenium WebDriver 4.35.0: UI automation</li> <li>REST Assured 5.5.5: API testing</li> <li>Allure 2.29.1: Test reporting and visualization</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#key-dependencies","title":"Key Dependencies","text":"<ul> <li>WebDriverManager 6.1.0: Automatic driver management</li> <li>Jackson 2.19.2: JSON processing</li> <li>Apache Commons: Utility libraries</li> <li>AssertJ 3.27.3: Fluent assertions</li> <li>Hamcrest 3.0: Matchers for testing</li> <li>Lombok 1.18.30: Boilerplate code reduction</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#getting-started","title":"\ud83d\udea6 Getting Started","text":""},{"location":"projects/professional/frameworks/java-automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 19 or higher</li> <li>Maven 3.6+</li> <li>Chrome browser (for default execution)</li> <li>Allure CLI (optional, for local report generation)</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository </p><pre><code>git clone &lt;repository-url&gt;\ncd fahmi-java-framework\n</code></pre><p></p> </li> <li> <p>Install dependencies </p><pre><code>mvn clean install\n</code></pre><p></p> </li> <li> <p>Configure environment (optional)</p> </li> </ol> <p>Edit <code>src/main/resources/dev.properties</code>:    </p><pre><code>PROJECT_DIR=C:\\\\path\\\\to\\\\your\\\\project\nBASE_URL_DEV=https://your-test-site.com\nGENERATE_ALLURE_HTML_REPORT=allure generate --single-file target/allure-results -o target/allure-report --clean\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#running-tests","title":"Running Tests","text":""},{"location":"projects/professional/frameworks/java-automation/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\nmvn clean test\n\n# Run specific test class\nmvn clean test -Dtest=PortfolioTest\n\n# Run with specific browser\nmvn clean test -Dbrowser=firefox\n\n# Run in headless mode (CI environment)\nmvn clean test -DHEADLESS=true\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#parallel-execution","title":"Parallel Execution","text":"<p>Tests are configured to run in parallel by default. Configuration in <code>src/test/resources/junit-platform.properties</code>: </p><pre><code>junit.jupiter.execution.parallel.enabled=true\njunit.jupiter.execution.parallel.mode.classes.default=concurrent\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#test-reporting","title":"\ud83d\udcca Test Reporting","text":""},{"location":"projects/professional/frameworks/java-automation/#allure-reports","title":"Allure Reports","text":"<p>The framework automatically generates Allure reports with:</p> <ul> <li>Test execution results with pass/fail status</li> <li>Screenshots for failed tests</li> <li>Step-by-step execution details</li> <li>API request/response logs</li> <li>Environment information</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#generate-local-report","title":"Generate Local Report","text":"<pre><code>mvn clean test\nallure serve target/allure-results\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#view-reports-in-ci","title":"View Reports in CI","text":"<p>Reports are automatically deployed to GitHub Pages after each CI run. Access via: <code>https://&lt;username&gt;.github.io/&lt;repository-name&gt;/</code></p>"},{"location":"projects/professional/frameworks/java-automation/#cross-browser-support","title":"\ud83c\udf10 Cross-Browser Support","text":""},{"location":"projects/professional/frameworks/java-automation/#supported-browsers","title":"Supported Browsers","text":"<pre><code>// Chrome (default)\nWebDriver driver = CrossBrowser.getDriver(\"chrome\");\n\n// Firefox\nWebDriver driver = CrossBrowser.getDriver(\"firefox\");\n\n// Edge\nWebDriver driver = CrossBrowser.getDriver(\"edge\");\n\n// Safari (macOS only)\nWebDriver driver = CrossBrowser.getDriver(\"safari\");\n\n// Headless Chrome (CI/CD)\nWebDriver driver = CrossBrowser.getHeadlessChromeDriver();\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#browser-configuration","title":"Browser Configuration","text":"<p>Each browser includes optimized settings:</p> <ul> <li>Chrome: Headless support, incognito mode, automation flags</li> <li>Firefox: Private browsing, notification blocking</li> <li>Edge: InPrivate mode, automation compatibility</li> <li>Safari: macOS-specific configurations</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#framework-components","title":"\ud83d\udd27 Framework Components","text":""},{"location":"projects/professional/frameworks/java-automation/#safeaction-utility","title":"SafeAction Utility","text":"<p>Enhanced element interactions with automatic retry and highlighting: </p><pre><code>SafeAction safeAction = new SafeAction(driver);\n\n// Safe clicking with scroll and highlight\nsafeAction.safeClick(By.id(\"submitButton\"));\n\n// Safe text input with validation\nsafeAction.safeInput(By.id(\"username\"), \"testuser\");\n\n// Dropdown selection\nsafeAction.selectFromDropdown(By.id(\"country\"), \"United States\");\n\n// Wait for elements with highlighting\nsafeAction.waitForElementToBeVisible(By.className(\"loading\"));\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#validation-framework","title":"Validation Framework","text":"<p>Flexible validation system with detailed reporting: </p><pre><code>ValidationUtils validator = new ValidationUtils(driver, \"TestClassName\");\n\n// Different assertion types\nvalidator.assertEquals(\"Login Title\", \"Expected Title\", actualTitle);\nvalidator.assertNotNull(\"User Profile\", userProfile);\nvalidator.assertTrue(\"Terms Accepted\", isTermsChecked);\n\n// Check all validations at test end\nvalidator.checkValidationResults(); // Fails test if any validation failed\n// OR\nvalidator.printValidationSummary(); // Just prints summary\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#screenshot-management","title":"Screenshot Management","text":"<p>Automatic screenshot capture for failures and manual screenshots: </p><pre><code>ScreenshotHandler screenshot = new ScreenshotHandler(driver, \"TestClass\");\n\n// Automatic failure screenshots (via ScreenshotTestWatcher)\n// Manual screenshots\nscreenshot.takeFullPageScreenshot(\"login-page\");\nscreenshot.attachScreenshotToAllure(\"Step 1 - Login Form\");\n\n// Highlighted element screenshots\nscreenshot.takeHighlightedElementScreenshot(By.id(\"error-message\"), \"error-state\");\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#cicd-pipeline","title":"\ud83d\udd04 CI/CD Pipeline","text":""},{"location":"projects/professional/frameworks/java-automation/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The framework includes a complete CI/CD pipeline (<code>.github/workflows/ci.yml</code>) that:</p> <ol> <li> <p>Environment Setup</p> <ul> <li>Java 19 with Maven caching</li> <li>Chrome browser installation</li> <li>Allure CLI setup</li> </ul> </li> <li> <p>Test Execution</p> <ul> <li>Clean test runs with parallel execution</li> <li>Environment variable support</li> <li>Comprehensive logging</li> </ul> </li> <li> <p>Report Generation</p> <ul> <li>Automatic Allure report generation</li> <li>GitHub Pages deployment</li> <li>Artifact preservation</li> </ul> </li> <li> <p>Features</p> <ul> <li>Runs on every push to main branch</li> <li>Parallel job execution</li> <li>Detailed logging and error handling</li> <li>Automatic cleanup</li> </ul> </li> </ol>"},{"location":"projects/professional/frameworks/java-automation/#pipeline-status","title":"Pipeline Status","text":"<pre><code># Trigger on main branch push\non:\n  push:\n    branches: [main]\n\n# Parallel execution with 2 threads\nparallel: classes\nthreadCount: 2\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"projects/professional/frameworks/java-automation/#test-organization","title":"Test Organization","text":"<ul> <li>Base Classes: Extend <code>BaseTests</code> for standard UI tests</li> <li>Page Objects: Implement page object pattern for maintainability</li> <li>Test Data: Use parameterized tests for data-driven testing</li> <li>Assertions: Use <code>ValidationUtils</code> for detailed validation reporting</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#error-handling","title":"Error Handling","text":"<ul> <li>Automatic Screenshots: Failure screenshots via <code>ScreenshotTestWatcher</code></li> <li>Retry Mechanisms: Built into <code>SafeAction</code> utilities</li> <li>Graceful Degradation: Cross-browser fallbacks</li> <li>Detailed Logging: Event-driven logging for debugging</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#performance","title":"Performance","text":"<ul> <li>Parallel Execution: JUnit 5 parallel test execution</li> <li>Driver Management: Automatic WebDriver lifecycle management</li> <li>Resource Cleanup: Proper driver cleanup after tests</li> <li>Caching: Maven dependency caching in CI</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"projects/professional/frameworks/java-automation/#common-issues","title":"Common Issues","text":""},{"location":"projects/professional/frameworks/java-automation/#webdriver-issues","title":"WebDriver Issues","text":"<pre><code># Clear WebDriver cache\nmvn clean test -Dwdm.clearCache=true\n\n# Force driver update\nmvn clean test -Dwdm.forceCache=false\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#memory-issues","title":"Memory Issues","text":"<pre><code># Increase Maven memory\nexport MAVEN_OPTS=\"-Xmx2048m -XX:MaxMetaspaceSize=512m\"\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#parallel-execution-issues","title":"Parallel Execution Issues","text":"<pre><code># Reduce parallelism in junit-platform.properties\njunit.jupiter.execution.parallel.config.fixed.parallelism=1\n</code></pre>"},{"location":"projects/professional/frameworks/java-automation/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging by modifying the <code>EventReporter</code> configuration: </p><pre><code>EventReporter listener = new EventReporter(\n    true,  // logNavigation\n    true,  // logElementInteractions  \n    true   // logDriverActions\n);\n</code></pre><p></p>"},{"location":"projects/professional/frameworks/java-automation/#contributing","title":"\ud83e\udd1d Contributing","text":"<ol> <li>Fork the repository</li> <li>Create feature branch: <code>git checkout -b feature/amazing-feature</code></li> <li>Commit changes: <code>git commit -m 'Add amazing feature'</code></li> <li>Push to branch: <code>git push origin feature/amazing-feature</code></li> <li>Open Pull Request</li> </ol>"},{"location":"projects/professional/frameworks/java-automation/#development-guidelines","title":"Development Guidelines","text":"<ul> <li>Follow existing code style and patterns</li> <li>Add tests for new features</li> <li>Update documentation as needed</li> <li>Ensure all tests pass before submitting PR</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>Framework Repository: https://github.com/fahmiwazu/java-automation</li> <li>Live Test Results: https://fahmiwazu.github.io/java-automation</li> </ul>"},{"location":"projects/professional/frameworks/java-automation/#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the Apache 2.0 License.</p>"},{"location":"projects/professional/frameworks/java-automation/#support","title":"\ud83d\udcde Support","text":"<p>For questions and support:</p> <ul> <li>Issues: Create GitHub issues for bugs and feature requests</li> <li>Documentation: Check existing tests for usage examples</li> <li>Allure Reports: Review generated reports for test execution details</li> </ul> <p>Happy Testing! \ud83c\udf89</p>"},{"location":"projects/professional/web-apps/simple-crud-apps/","title":"Simple CRUD Apps","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#simple-crud-apps-full-stack-product-management-system","title":"Simple CRUD Apps - Full-Stack Product Management System","text":"<p>A complete full-stack CRUD (Create, Read, Update, Delete) application featuring both a REST API backend and an interactive web frontend. Built with Node.js, Express.js, MongoDB, and vanilla JavaScript, deployed on Vercel. This project demonstrates modern full-stack development practices with a clean MVC architecture.</p>"},{"location":"projects/professional/web-apps/simple-crud-apps/#overview","title":"\ud83d\ude80 Overview","text":"<p>This project demonstrates a complete full-stack development workflow:</p> <ul> <li>Backend API: Express.js REST API with MongoDB integration</li> <li>Frontend Interface: Interactive web application with modern UI/UX</li> <li>Database: MongoDB Atlas cloud database</li> <li>Deployment: Hosted on Vercel at https://simple-crud-apps.vercel.app</li> <li>Architecture: Clean separation of concerns with MVC pattern</li> <li>Features: Real-time CRUD operations, responsive design, modal dialogs, notifications</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#inspiration","title":"\ud83d\udca1 Inspiration","text":"<p>This project was inspired by the YouTube tutorial: Build Node.js API from Scratch</p>"},{"location":"projects/professional/web-apps/simple-crud-apps/#running-the-project-locally","title":"\ud83c\udfc3\u200d\u2642\ufe0f Running the Project Locally","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (v16 or higher)</li> <li>MongoDB Atlas account</li> <li>Git for cloning</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the Repository </p><pre><code>git clone https://github.com/yourusername/simple-crud-apps.git\ncd simple-crud-apps\n</code></pre><p></p> </li> <li> <p>Install Dependencies </p><pre><code>npm install\n</code></pre><p></p> </li> <li> <p>Setup Environment Variables    Create a <code>.env</code> file in the root directory: </p><pre><code>SCA_DB_NAME=your_mongodb_username\nSCA_DB_PASSWORD=your_mongodb_password\n</code></pre><p></p> </li> <li> <p>Start Development Server </p><pre><code># Development mode with nodemon (auto-reload)\nnpm run dev\n\n# Production mode\nnpm run serve\n</code></pre><p></p> </li> <li> <p>Verify Installation</p> </li> <li>Server runs on: <code>http://localhost:3000</code></li> <li>Web interface: <code>http://localhost:3000</code> (opens the frontend application)</li> <li>API endpoint: <code>GET http://localhost:3000/api/products</code></li> <li>Test the full application by adding, updating, and deleting products through the web interface</li> </ol>"},{"location":"projects/professional/web-apps/simple-crud-apps/#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 controllers/\n\u2502   \u2514\u2500\u2500 product.controller.js    # Business logic for CRUD operations\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 product.models.js        # Mongoose schema definition\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 product.route.js         # API route definitions\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html              # Frontend web application\n\u251c\u2500\u2500 index.js                     # Application entry point\n\u251c\u2500\u2500 package.json                 # Dependencies and scripts\n\u251c\u2500\u2500 vercel.json                  # Vercel deployment configuration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#crud-application-structure","title":"\ud83c\udfd7\ufe0f CRUD Application Structure","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#api-endpoints","title":"API Endpoints","text":"<p>The application provides a complete REST API for product management:</p> Method Endpoint Description Body Required <code>GET</code> <code>/api/products</code> Get all products No <code>GET</code> <code>/api/products/:id</code> Get single product No <code>POST</code> <code>/api/products</code> Create new product Yes <code>PUT</code> <code>/api/products/:id</code> Update existing product Yes <code>DELETE</code> <code>/api/products/:id</code> Delete product No"},{"location":"projects/professional/web-apps/simple-crud-apps/#requestresponse-examples","title":"Request/Response Examples","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#create-product-post","title":"Create Product (POST)","text":"<pre><code>// Request Body\n{\n  \"name\": \"Laptop\",\n  \"quantity\": 10,\n  \"price\": 15000000\n}\n\n// Response\n{\n  \"_id\": \"60d5ecb74e33a81234567890\",\n  \"name\": \"Laptop\",\n  \"quantity\": 10,\n  \"price\": 15000000,\n  \"createdAt\": \"2023-06-25T10:30:00.000Z\",\n  \"updatedAt\": \"2023-06-25T10:30:00.000Z\",\n  \"__v\": 0\n}\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#update-product-put","title":"Update Product (PUT)","text":"<pre><code>// Request Body\n{\n  \"name\": \"Gaming Laptop\",\n  \"price\": 18000000\n}\n\n// Response - Updated product with new values\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#delete-product-delete","title":"Delete Product (DELETE)","text":"<pre><code>// Response\n{\n  \"message\": \"Product deleted successfully\"\n}\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#mongodb-integration","title":"\ud83d\uddc4\ufe0f MongoDB Integration","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#database-configuration","title":"Database Configuration","text":"<ul> <li>Provider: MongoDB Atlas (Cloud)</li> <li>Connection: Mongoose ODM</li> <li>Environment Variables:<ul> <li><code>SCA_DB_NAME</code>: Database username</li> <li><code>SCA_DB_PASSWORD</code>: Database password</li> </ul> </li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#product-schema","title":"Product Schema","text":"<pre><code>{\n  name: {\n    type: String,\n    required: [true, \"Please enter product name\"]\n  },\n  quantity: {\n    type: Number,\n    required: true,\n    default: 0 \n  },\n  price: {\n    type: Number,\n    required: true,\n    default: 0 \n  },\n  Image: {\n    type: String,\n    required: false\n  }\n}\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#features","title":"Features","text":"<ul> <li>Timestamps: Automatic <code>createdAt</code> and <code>updatedAt</code> fields</li> <li>Validation: Required field validation with custom messages</li> <li>MongoDB ObjectId: Automatic ID generation and validation</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#frontend-features","title":"\ud83c\udfa8 Frontend Features","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#user-interface","title":"User Interface","text":"<ul> <li>Modern Design: Clean, responsive interface with gradient backgrounds</li> <li>Real-time Updates: Live product list updates after CRUD operations</li> <li>Modal Dialogs: Smooth update and delete confirmation modals</li> <li>Notifications: Toast notifications for user feedback</li> <li>Responsive Layout: Mobile-first design that works on all devices</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#user-experience","title":"User Experience","text":"<ul> <li>Form Validation: Client-side validation with user-friendly error messages</li> <li>Loading States: Visual feedback during API operations</li> <li>Empty States: Helpful messages when no products exist</li> <li>Keyboard Navigation: Full keyboard accessibility support</li> <li>Error Handling: Graceful error handling with user-friendly messages</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#interactive-elements","title":"Interactive Elements","text":"<ul> <li>Add Products: Intuitive form with real-time validation</li> <li>Update Products: Pre-filled modal with current values</li> <li>Delete Products: Confirmation dialog to prevent accidental deletion</li> <li>Product Display: Organized table view with all product details</li> <li>Search &amp; Filter: Easy product management interface</li> </ul> <p>Live App Overview</p> Desktop OverviewMobile Overview <p></p> Simple CRUD Apps Desktop Overview <p></p> <p></p> Simple CRUD Apps Mobile Overview <p></p>"},{"location":"projects/professional/web-apps/simple-crud-apps/#deployment-on-vercel","title":"\ud83c\udf10 Deployment on Vercel","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#live-application","title":"Live Application","text":"<ul> <li>URL: https://simple-crud-apps.vercel.app</li> <li>Status: Production ready</li> <li>Environment: Node.js runtime on Vercel</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#deployment-features","title":"Deployment Features","text":"<ul> <li>Automatic Deployment: Triggered by GitHub pushes</li> <li>Environment Variables: Securely stored MongoDB credentials</li> <li>Serverless: Scalable serverless functions</li> <li>Global CDN: Fast worldwide access</li> <li>Static File Serving: Frontend files served from <code>/public</code> directory</li> <li>API Routing: REST API endpoints handled by serverless functions</li> <li>Mixed Content: Both API and static content served from single domain</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#frontend-application","title":"\ud83c\udf10 Frontend Application","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#web-interface-features","title":"Web Interface Features","text":"<ul> <li>Live Demo: Visit https://simple-crud-apps.vercel.app to see the application in action</li> <li>Product Management: Complete CRUD operations through an intuitive web interface</li> <li>Real-time Updates: Changes are immediately reflected in the product list</li> <li>Responsive Design: Works seamlessly on desktop, tablet, and mobile devices</li> <li>Modern UI: Clean, professional interface with smooth animations and transitions</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#key-frontend-components","title":"Key Frontend Components","text":"<ul> <li>Product Form: Add new products with validation</li> <li>Product List: View all products in an organized table format</li> <li>Update Modal: Edit existing products with pre-filled forms</li> <li>Delete Confirmation: Safe deletion with confirmation dialogs</li> <li>Notifications: Real-time feedback for all operations</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#api-testing","title":"\ud83e\uddea API Testing","text":"<p>For comprehensive API testing and automation, check out the dedicated testing repository:</p> <ul> <li>GitHub Repository: https://github.com/fahmiwazu/newman-automation</li> <li>Live Test Results: https://fahmiwazu.github.io/newman-automation</li> </ul> <p>The testing repository includes: - Automated Newman/Postman test collections - CI/CD pipeline with GitHub Actions - Performance reporting and monitoring - Both local and production environment testing</p>"},{"location":"projects/professional/web-apps/simple-crud-apps/#development-scripts","title":"\ud83d\udee0\ufe0f Development Scripts","text":"<pre><code>{\n  \"scripts\": {\n    \"dev\": \"nodemon index.js\",      // Development with auto-reload\n    \"serve\": \"node index.js\",       // Production server\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  }\n}\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#tech-stack","title":"\ud83e\uddf0 Tech Stack","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#backend","title":"Backend","text":"<ul> <li>Runtime: Node.js</li> <li>Framework: Express.js</li> <li>Database: MongoDB with Mongoose ODM</li> <li>Environment: dotenv for configuration</li> <li>Middleware: Express JSON parsing, static file serving</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#frontend","title":"Frontend","text":"<ul> <li>Language: Vanilla JavaScript (ES6+)</li> <li>Styling: Modern CSS3 with responsive design</li> <li>UI Components: Custom modal dialogs, notifications, forms</li> <li>API Integration: Fetch API for REST communication</li> <li>Features: Real-time updates, form validation, responsive layout</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#deployment","title":"Deployment","text":"<ul> <li>Platform: Vercel (Serverless)</li> <li>Database: MongoDB Atlas (Cloud)</li> <li>Domain: Custom Vercel domain</li> <li>Static Files: Served from <code>/public</code> directory</li> </ul>"},{"location":"projects/professional/web-apps/simple-crud-apps/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Database Connection Failed</p> <ul> <li>Verify MongoDB Atlas credentials</li> <li>Check IP whitelist in MongoDB Atlas</li> <li>Ensure environment variables are set correctly</li> </ul> </li> <li> <p>Local Server Won't Start</p> <ul> <li>Check if port 3000 is available</li> <li>Verify Node.js installation</li> <li>Install dependencies with <code>npm install</code></li> </ul> </li> <li> <p>Environment Variables Not Loading</p> <ul> <li>Create <code>.env</code> file in root directory</li> <li>Check <code>.env</code> file syntax</li> <li>Restart server after adding variables</li> </ul> </li> </ol>"},{"location":"projects/professional/web-apps/simple-crud-apps/#api-usage-examples","title":"\ud83d\udcca API Usage Examples","text":""},{"location":"projects/professional/web-apps/simple-crud-apps/#using-curl","title":"Using cURL","text":"<pre><code># Get all products\ncurl -X GET https://simple-crud-apps.vercel.app/api/products\n\n# Create a product  \ncurl -X POST https://simple-crud-apps.vercel.app/api/products \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Smartphone\",\"quantity\":5,\"price\":8000000}'\n\n# Get single product\ncurl -X GET https://simple-crud-apps.vercel.app/api/products/{product_id}\n\n# Update product\ncurl -X PUT https://simple-crud-apps.vercel.app/api/products/{product_id} \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"iPhone\",\"price\":12000000}'\n\n# Delete product\ncurl -X DELETE https://simple-crud-apps.vercel.app/api/products/{product_id}\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#using-javascript-fetch-api","title":"Using JavaScript (Fetch API)","text":"<pre><code>// Get all products\nconst response = await fetch('https://simple-crud-apps.vercel.app/api/products');\nconst products = await response.json();\n\n// Create new product\nconst newProduct = await fetch('https://simple-crud-apps.vercel.app/api/products', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    name: 'Tablet',\n    quantity: 3,\n    price: 5000000\n  })\n});\n</code></pre>"},{"location":"projects/professional/web-apps/simple-crud-apps/#contributing","title":"\ud83e\udd1d Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"projects/professional/web-apps/simple-crud-apps/#license","title":"\ud83d\udcc4 License","text":"<p>This project is open source and available under the MIT License.</p>"},{"location":"projects/professional/web-apps/simple-crud-apps/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>Live API: https://simple-crud-apps.vercel.app</li> <li>API Testing Repository: https://github.com/fahmiwazu/newman-automation</li> <li>Live Test Results: https://fahmiwazu.github.io/newman-automation</li> <li>YouTube Tutorial: Build Node.js API from Scratch</li> <li>MongoDB Atlas: https://www.mongodb.com/cloud/atlas</li> <li>Vercel: https://vercel.com</li> </ul> <p>Happy Coding! \ud83d\ude80</p>"}]}